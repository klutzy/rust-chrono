var searchIndex = {};
searchIndex['chrono'] = {"items":[[0,"","chrono","# Chrono"],[2,"Weekday","","The day of week (DOW)."],[12,"Mon","","Monday.",0],[12,"Tue","","Tuesday.",0],[12,"Wed","","Wednesday.",0],[12,"Thu","","Thursday.",0],[12,"Fri","","Friday.",0],[12,"Sat","","Saturday.",0],[12,"Sun","","Sunday.",0],[0,"duration","","ISO 8601 duration."],[10,"weeks","std::time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\nPanics when the duration is out of bounds.",1],[10,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",1],[10,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",1],[10,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",1],[10,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",1],[10,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",1],[10,"microseconds","","Makes a new `Duration` with given number of microseconds.",1],[10,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",1],[10,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",1],[10,"num_weeks","","Returns the total number of whole weeks in the duration.",1],[10,"num_days","","Returns the total number of whole days in the duration.",1],[10,"num_hours","","Returns the total number of whole hours in the duration.",1],[10,"num_minutes","","Returns the total number of whole minutes in the duration.",1],[10,"num_seconds","","Returns the total number of whole seconds in the duration.",1],[10,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",1],[10,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",1],[10,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",1],[10,"checked_add","","Add two durations, returning `None` if overflow occured.",1],[10,"checked_sub","","Subtract two durations, returning `None` if overflow occured.",1],[10,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",1],[10,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",1],[10,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",1],[10,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",1],[10,"hash","std::ascii","",2],[10,"assert_receiver_is_total_eq","","",2],[10,"cmp","","",2],[10,"partial_cmp","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"lt","","",2],[10,"le","","",2],[10,"gt","","",2],[10,"ge","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"ne","","",2],[10,"clone","","",2],[10,"clone_from","","",2],[10,"as_byte","","Converts an ascii character into a `u8`.",2],[10,"to_byte","","Deprecated: use `as_byte` isntead.",2],[10,"as_char","","Converts an ascii character into a `char`.",2],[10,"to_char","","Deprecated: use `as_char` isntead.",2],[10,"to_lowercase","","Convert to lowercase.",2],[10,"to_uppercase","","Convert to uppercase.",2],[10,"eq_ignore_case","","Compares two ascii characters of equality, ignoring case.",2],[10,"is_alphabetic","","Check if the character is a letter (a-z, A-Z)",2],[10,"is_digit","","Check if the character is a number (0-9)",2],[10,"is_alphanumeric","","Check if the character is a letter or number",2],[10,"is_blank","","Check if the character is a space or horizontal tab",2],[10,"is_control","","Check if the character is a control character",2],[10,"is_graph","","Checks if the character is printable (except space)",2],[10,"is_print","","Checks if the character is printable (including space)",2],[10,"is_lowercase","","Checks if the character is alphabetic and lowercase",2],[10,"is_uppercase","","Checks if the character is alphabetic and uppercase",2],[10,"is_punctuation","","Checks if the character is punctuation",2],[10,"is_hex","","Checks if the character is a valid hex digit",2],[10,"fmt","","",2],[10,"is_ascii","collections::string","",3],[10,"into_ascii_nocheck","","",3],[10,"into_ascii","","",3],[10,"into_ascii_opt","","",3],[10,"is_ascii","collections::vec","",4],[10,"into_ascii_nocheck","","",4],[10,"into_ascii","","",4],[10,"into_ascii_opt","","",4],[10,"into_string","","",4],[10,"into_bytes","","",4],[10,"into_ascii_upper","collections::string","",3],[10,"into_ascii_lower","","",3],[10,"into_ascii_upper","collections::vec","",4],[10,"into_ascii_lower","","",4],[10,"set","std::thread_local::scoped","Insert a value into this scoped thread local storage slot for a\nduration of a closure.",5],[10,"with","","Get a value out of this scoped variable.",5],[10,"is_set","","Test whether this TLS key has been `set` for the current thread.",5],[10,"with","std::thread_local","Acquire a reference to the value in this TLS key.",6],[10,"destroyed","","Test this TLS key to determine whether its value has been destroyed for\nthe current thread or not.",6],[10,"drop","std::c_vec","",7],[10,"new","","Create a `CVec` from a raw pointer to a buffer with a given length.",7],[10,"new_with_dtor","","Create a `CVec` from a foreign buffer, with a given length,\nand a function to run upon destruction.",7],[10,"as_mut_slice","","View the stored data as a mutable slice.",7],[10,"get","","Retrieves an element at a given index, returning `None` if the requested\nindex is greater than the length of the vector.",7],[10,"get_mut","","Retrieves a mutable element at a given index, returning `None` if the\nrequested index is greater than the length of the vector.",7],[10,"into_inner","","Unwrap the pointer without running the destructor",7],[10,"unwrap","","Deprecated, use into_inner() instead",7],[10,"len","","Returns the number of items in this vector.",7],[10,"is_empty","","Returns whether this vector is empty.",7],[10,"as_slice","","View the stored data as a slice.",7],[10,"drop","std::dynamic_lib","",8],[10,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",8],[10,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",8],[10,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",8],[10,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",8],[10,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",8],[10,"symbol","","Access the value at the symbol of the dynamic library",8],[10,"write","core::fmt","",9],[10,"flush","","",9],[10,"write_fmt","","",9],[10,"write_str","","",9],[10,"write_line","","",9],[10,"write_char","","",9],[10,"write_int","","",9],[10,"write_uint","","",9],[10,"write_le_uint","","",9],[10,"write_le_int","","",9],[10,"write_be_uint","","",9],[10,"write_be_int","","",9],[10,"write_be_u64","","",9],[10,"write_be_u32","","",9],[10,"write_be_u16","","",9],[10,"write_be_i64","","",9],[10,"write_be_i32","","",9],[10,"write_be_i16","","",9],[10,"write_be_f64","","",9],[10,"write_be_f32","","",9],[10,"write_le_u64","","",9],[10,"write_le_u32","","",9],[10,"write_le_u16","","",9],[10,"write_le_i64","","",9],[10,"write_le_i32","","",9],[10,"write_le_i16","","",9],[10,"write_le_f64","","",9],[10,"write_le_f32","","",9],[10,"write_u8","","",9],[10,"write_i8","","",9],[10,"eq","core::fmt::rt","",10],[10,"ne","","",10],[10,"ne","","",10],[10,"with_capacity","std::io::buffered","Creates a new `BufferedReader` with the specified buffer capacity",11],[10,"new","","Creates a new `BufferedReader` with a default buffer capacity",11],[10,"get_ref","","Gets a reference to the underlying reader.",11],[10,"get_mut","","Gets a mutable reference to the underlying reader.",11],[10,"into_inner","","Unwraps this `BufferedReader`, returning the underlying reader.",11],[10,"unwrap","","Deprecated, use into_inner() instead",11],[10,"fill_buf","","",11],[10,"consume","","",11],[10,"read_line","","",11],[10,"read_until","","",11],[10,"read_char","","",11],[10,"read","","",11],[10,"read_at_least","","",11],[10,"read_byte","","",11],[10,"push","","",11],[10,"push_at_least","","",11],[10,"read_exact","","",11],[10,"read_to_end","","",11],[10,"read_to_string","","",11],[10,"read_le_uint_n","","",11],[10,"read_le_int_n","","",11],[10,"read_be_uint_n","","",11],[10,"read_be_int_n","","",11],[10,"read_le_uint","","",11],[10,"read_le_int","","",11],[10,"read_be_uint","","",11],[10,"read_be_int","","",11],[10,"read_be_u64","","",11],[10,"read_be_u32","","",11],[10,"read_be_u16","","",11],[10,"read_be_i64","","",11],[10,"read_be_i32","","",11],[10,"read_be_i16","","",11],[10,"read_be_f64","","",11],[10,"read_be_f32","","",11],[10,"read_le_u64","","",11],[10,"read_le_u32","","",11],[10,"read_le_u16","","",11],[10,"read_le_i64","","",11],[10,"read_le_i32","","",11],[10,"read_le_i16","","",11],[10,"read_le_f64","","",11],[10,"read_le_f32","","",11],[10,"read_u8","","",11],[10,"read_i8","","",11],[10,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",12],[10,"new","","Creates a new `BufferedWriter` with a default buffer capacity",12],[10,"get_ref","","Gets a reference to the underlying writer.",12],[10,"get_mut","","Gets a mutable reference to the underlying write.",12],[10,"into_inner","","Unwraps this `BufferedWriter`, returning the underlying writer.",12],[10,"unwrap","","Deprecated, use into_inner() instead",12],[10,"write","","",12],[10,"flush","","",12],[10,"flush","","",12],[10,"write_fmt","","",12],[10,"write_str","","",12],[10,"write_line","","",12],[10,"write_char","","",12],[10,"write_int","","",12],[10,"write_uint","","",12],[10,"write_le_uint","","",12],[10,"write_le_int","","",12],[10,"write_be_uint","","",12],[10,"write_be_int","","",12],[10,"write_be_u64","","",12],[10,"write_be_u32","","",12],[10,"write_be_u16","","",12],[10,"write_be_i64","","",12],[10,"write_be_i32","","",12],[10,"write_be_i16","","",12],[10,"write_be_f64","","",12],[10,"write_be_f32","","",12],[10,"write_le_u64","","",12],[10,"write_le_u32","","",12],[10,"write_le_u16","","",12],[10,"write_le_i64","","",12],[10,"write_le_i32","","",12],[10,"write_le_i16","","",12],[10,"write_le_f64","","",12],[10,"write_le_f32","","",12],[10,"write_u8","","",12],[10,"write_i8","","",12],[10,"drop","","",12],[10,"new","","Creates a new `LineBufferedWriter`",13],[10,"get_ref","","Gets a reference to the underlying writer.",13],[10,"into_inner","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",13],[10,"unwrap","","Deprecated, use into_inner() instead",13],[10,"write","","",13],[10,"flush","","",13],[10,"flush","","",13],[10,"write_fmt","","",13],[10,"write_str","","",13],[10,"write_line","","",13],[10,"write_char","","",13],[10,"write_int","","",13],[10,"write_uint","","",13],[10,"write_le_uint","","",13],[10,"write_le_int","","",13],[10,"write_be_uint","","",13],[10,"write_be_int","","",13],[10,"write_be_u64","","",13],[10,"write_be_u32","","",13],[10,"write_be_u16","","",13],[10,"write_be_i64","","",13],[10,"write_be_i32","","",13],[10,"write_be_i16","","",13],[10,"write_be_f64","","",13],[10,"write_be_f32","","",13],[10,"write_le_u64","","",13],[10,"write_le_u32","","",13],[10,"write_le_u16","","",13],[10,"write_le_i64","","",13],[10,"write_le_i32","","",13],[10,"write_le_i16","","",13],[10,"write_le_f64","","",13],[10,"write_le_f32","","",13],[10,"write_u8","","",13],[10,"write_i8","","",13],[10,"read","","",14],[10,"read_at_least","","",14],[10,"read_byte","","",14],[10,"push","","",14],[10,"push_at_least","","",14],[10,"read_exact","","",14],[10,"read_to_end","","",14],[10,"read_to_string","","",14],[10,"read_le_uint_n","","",14],[10,"read_le_int_n","","",14],[10,"read_be_uint_n","","",14],[10,"read_be_int_n","","",14],[10,"read_le_uint","","",14],[10,"read_le_int","","",14],[10,"read_be_uint","","",14],[10,"read_be_int","","",14],[10,"read_be_u64","","",14],[10,"read_be_u32","","",14],[10,"read_be_u16","","",14],[10,"read_be_i64","","",14],[10,"read_be_i32","","",14],[10,"read_be_i16","","",14],[10,"read_be_f64","","",14],[10,"read_be_f32","","",14],[10,"read_le_u64","","",14],[10,"read_le_u32","","",14],[10,"read_le_u16","","",14],[10,"read_le_i64","","",14],[10,"read_le_i32","","",14],[10,"read_le_i16","","",14],[10,"read_le_f64","","",14],[10,"read_le_f32","","",14],[10,"read_u8","","",14],[10,"read_i8","","",14],[10,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",15],[10,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",15],[10,"get_ref","","Gets a reference to the underlying stream.",15],[10,"get_mut","","Gets a mutable reference to the underlying stream.",15],[10,"into_inner","","Unwraps this `BufferedStream`, returning the underlying stream.",15],[10,"unwrap","","Deprecated, use into_inner() instead",15],[10,"fill_buf","","",15],[10,"consume","","",15],[10,"read_line","","",15],[10,"read_until","","",15],[10,"read_char","","",15],[10,"read","","",15],[10,"read_at_least","","",15],[10,"read_byte","","",15],[10,"push","","",15],[10,"push_at_least","","",15],[10,"read_exact","","",15],[10,"read_to_end","","",15],[10,"read_to_string","","",15],[10,"read_le_uint_n","","",15],[10,"read_le_int_n","","",15],[10,"read_be_uint_n","","",15],[10,"read_be_int_n","","",15],[10,"read_le_uint","","",15],[10,"read_le_int","","",15],[10,"read_be_uint","","",15],[10,"read_be_int","","",15],[10,"read_be_u64","","",15],[10,"read_be_u32","","",15],[10,"read_be_u16","","",15],[10,"read_be_i64","","",15],[10,"read_be_i32","","",15],[10,"read_be_i16","","",15],[10,"read_be_f64","","",15],[10,"read_be_f32","","",15],[10,"read_le_u64","","",15],[10,"read_le_u32","","",15],[10,"read_le_u16","","",15],[10,"read_le_i64","","",15],[10,"read_le_i32","","",15],[10,"read_le_i16","","",15],[10,"read_le_f64","","",15],[10,"read_le_f32","","",15],[10,"read_u8","","",15],[10,"read_i8","","",15],[10,"write","","",15],[10,"flush","","",15],[10,"flush","","",15],[10,"write_fmt","","",15],[10,"write_str","","",15],[10,"write_line","","",15],[10,"write_char","","",15],[10,"write_int","","",15],[10,"write_uint","","",15],[10,"write_le_uint","","",15],[10,"write_le_int","","",15],[10,"write_be_uint","","",15],[10,"write_be_int","","",15],[10,"write_be_u64","","",15],[10,"write_be_u32","","",15],[10,"write_be_u16","","",15],[10,"write_be_i64","","",15],[10,"write_be_i32","","",15],[10,"write_be_i16","","",15],[10,"write_be_f64","","",15],[10,"write_be_f32","","",15],[10,"write_le_u64","","",15],[10,"write_le_u32","","",15],[10,"write_le_u16","","",15],[10,"write_le_i64","","",15],[10,"write_le_i32","","",15],[10,"write_le_i16","","",15],[10,"write_le_f64","","",15],[10,"write_le_f32","","",15],[10,"write_u8","","",15],[10,"write_i8","","",15],[10,"new","std::io::comm_adapters","Wraps a `Port` in a `ChanReader` structure",16],[10,"fill_buf","","",16],[10,"consume","","",16],[10,"read_line","","",16],[10,"read_until","","",16],[10,"read_char","","",16],[10,"read","","",16],[10,"read_at_least","","",16],[10,"read_byte","","",16],[10,"push","","",16],[10,"push_at_least","","",16],[10,"read_exact","","",16],[10,"read_to_end","","",16],[10,"read_to_string","","",16],[10,"read_le_uint_n","","",16],[10,"read_le_int_n","","",16],[10,"read_be_uint_n","","",16],[10,"read_be_int_n","","",16],[10,"read_le_uint","","",16],[10,"read_le_int","","",16],[10,"read_be_uint","","",16],[10,"read_be_int","","",16],[10,"read_be_u64","","",16],[10,"read_be_u32","","",16],[10,"read_be_u16","","",16],[10,"read_be_i64","","",16],[10,"read_be_i32","","",16],[10,"read_be_i16","","",16],[10,"read_be_f64","","",16],[10,"read_be_f32","","",16],[10,"read_le_u64","","",16],[10,"read_le_u32","","",16],[10,"read_le_u16","","",16],[10,"read_le_i64","","",16],[10,"read_le_i32","","",16],[10,"read_le_i16","","",16],[10,"read_le_f64","","",16],[10,"read_le_f32","","",16],[10,"read_u8","","",16],[10,"read_i8","","",16],[10,"new","","Wraps a channel in a `ChanWriter` structure",17],[10,"clone","","",17],[10,"clone_from","","",17],[10,"write","","",17],[10,"flush","","",17],[10,"write_fmt","","",17],[10,"write_str","","",17],[10,"write_line","","",17],[10,"write_char","","",17],[10,"write_int","","",17],[10,"write_uint","","",17],[10,"write_le_uint","","",17],[10,"write_le_int","","",17],[10,"write_be_uint","","",17],[10,"write_be_int","","",17],[10,"write_be_u64","","",17],[10,"write_be_u32","","",17],[10,"write_be_u16","","",17],[10,"write_be_i64","","",17],[10,"write_be_i32","","",17],[10,"write_be_i16","","",17],[10,"write_be_f64","","",17],[10,"write_be_f32","","",17],[10,"write_le_u64","","",17],[10,"write_le_u32","","",17],[10,"write_le_u16","","",17],[10,"write_le_i64","","",17],[10,"write_le_i32","","",17],[10,"write_le_i16","","",17],[10,"write_le_f64","","",17],[10,"write_le_f32","","",17],[10,"write_u8","","",17],[10,"write_i8","","",17],[10,"write","collections::vec","",4],[10,"flush","","",4],[10,"write_fmt","","",4],[10,"write_str","","",4],[10,"write_line","","",4],[10,"write_char","","",4],[10,"write_int","","",4],[10,"write_uint","","",4],[10,"write_le_uint","","",4],[10,"write_le_int","","",4],[10,"write_be_uint","","",4],[10,"write_be_int","","",4],[10,"write_be_u64","","",4],[10,"write_be_u32","","",4],[10,"write_be_u16","","",4],[10,"write_be_i64","","",4],[10,"write_be_i32","","",4],[10,"write_be_i16","","",4],[10,"write_be_f64","","",4],[10,"write_be_f32","","",4],[10,"write_le_u64","","",4],[10,"write_le_u32","","",4],[10,"write_le_u16","","",4],[10,"write_le_i64","","",4],[10,"write_le_i32","","",4],[10,"write_le_i16","","",4],[10,"write_le_f64","","",4],[10,"write_le_f32","","",4],[10,"write_u8","","",4],[10,"write_i8","","",4],[10,"clone","std::io::mem","",18],[10,"clone_from","","",18],[10,"new","","Create a new `MemWriter`.",18],[10,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",18],[10,"from_vec","","Create a new `MemWriter` that will append to an existing `Vec`.",18],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",18],[10,"into_inner","","Unwraps this `MemWriter`, returning the underlying buffer",18],[10,"unwrap","","Deprecated, use into_inner() instead",18],[10,"write","","",18],[10,"flush","","",18],[10,"write_fmt","","",18],[10,"write_str","","",18],[10,"write_line","","",18],[10,"write_char","","",18],[10,"write_int","","",18],[10,"write_uint","","",18],[10,"write_le_uint","","",18],[10,"write_le_int","","",18],[10,"write_be_uint","","",18],[10,"write_be_int","","",18],[10,"write_be_u64","","",18],[10,"write_be_u32","","",18],[10,"write_be_u16","","",18],[10,"write_be_i64","","",18],[10,"write_be_i32","","",18],[10,"write_be_i16","","",18],[10,"write_be_f64","","",18],[10,"write_be_f32","","",18],[10,"write_le_u64","","",18],[10,"write_le_u32","","",18],[10,"write_le_u16","","",18],[10,"write_le_i64","","",18],[10,"write_le_i32","","",18],[10,"write_le_i16","","",18],[10,"write_le_f64","","",18],[10,"write_le_f32","","",18],[10,"write_u8","","",18],[10,"write_i8","","",18],[10,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",19],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",19],[10,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",19],[10,"into_inner","","Unwraps this `MemReader`, returning the underlying buffer",19],[10,"unwrap","","Deprecated, use into_inner() instead",19],[10,"read","","",19],[10,"read_at_least","","",19],[10,"read_byte","","",19],[10,"push","","",19],[10,"push_at_least","","",19],[10,"read_exact","","",19],[10,"read_to_end","","",19],[10,"read_to_string","","",19],[10,"read_le_uint_n","","",19],[10,"read_le_int_n","","",19],[10,"read_be_uint_n","","",19],[10,"read_be_int_n","","",19],[10,"read_le_uint","","",19],[10,"read_le_int","","",19],[10,"read_be_uint","","",19],[10,"read_be_int","","",19],[10,"read_be_u64","","",19],[10,"read_be_u32","","",19],[10,"read_be_u16","","",19],[10,"read_be_i64","","",19],[10,"read_be_i32","","",19],[10,"read_be_i16","","",19],[10,"read_be_f64","","",19],[10,"read_be_f32","","",19],[10,"read_le_u64","","",19],[10,"read_le_u32","","",19],[10,"read_le_u16","","",19],[10,"read_le_i64","","",19],[10,"read_le_i32","","",19],[10,"read_le_i16","","",19],[10,"read_le_f64","","",19],[10,"read_le_f32","","",19],[10,"read_u8","","",19],[10,"read_i8","","",19],[10,"tell","","",19],[10,"seek","","",19],[10,"fill_buf","","",19],[10,"consume","","",19],[10,"read_line","","",19],[10,"read_until","","",19],[10,"read_char","","",19],[10,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",20],[10,"write","","",20],[10,"flush","","",20],[10,"write_fmt","","",20],[10,"write_str","","",20],[10,"write_line","","",20],[10,"write_char","","",20],[10,"write_int","","",20],[10,"write_uint","","",20],[10,"write_le_uint","","",20],[10,"write_le_int","","",20],[10,"write_be_uint","","",20],[10,"write_be_int","","",20],[10,"write_be_u64","","",20],[10,"write_be_u32","","",20],[10,"write_be_u16","","",20],[10,"write_be_i64","","",20],[10,"write_be_i32","","",20],[10,"write_be_i16","","",20],[10,"write_be_f64","","",20],[10,"write_be_f32","","",20],[10,"write_le_u64","","",20],[10,"write_le_u32","","",20],[10,"write_le_u16","","",20],[10,"write_le_i64","","",20],[10,"write_le_i32","","",20],[10,"write_le_i16","","",20],[10,"write_le_f64","","",20],[10,"write_le_f32","","",20],[10,"write_u8","","",20],[10,"write_i8","","",20],[10,"tell","","",20],[10,"seek","","",20],[10,"new","","Creates a new buffered reader which will read the specified buffer",21],[10,"eof","","Tests whether this reader has read all bytes in its buffer.",21],[10,"read","","",21],[10,"read_at_least","","",21],[10,"read_byte","","",21],[10,"push","","",21],[10,"push_at_least","","",21],[10,"read_exact","","",21],[10,"read_to_end","","",21],[10,"read_to_string","","",21],[10,"read_le_uint_n","","",21],[10,"read_le_int_n","","",21],[10,"read_be_uint_n","","",21],[10,"read_be_int_n","","",21],[10,"read_le_uint","","",21],[10,"read_le_int","","",21],[10,"read_be_uint","","",21],[10,"read_be_int","","",21],[10,"read_be_u64","","",21],[10,"read_be_u32","","",21],[10,"read_be_u16","","",21],[10,"read_be_i64","","",21],[10,"read_be_i32","","",21],[10,"read_be_i16","","",21],[10,"read_be_f64","","",21],[10,"read_be_f32","","",21],[10,"read_le_u64","","",21],[10,"read_le_u32","","",21],[10,"read_le_u16","","",21],[10,"read_le_i64","","",21],[10,"read_le_i32","","",21],[10,"read_le_i16","","",21],[10,"read_le_f64","","",21],[10,"read_le_f32","","",21],[10,"read_u8","","",21],[10,"read_i8","","",21],[10,"tell","","",21],[10,"seek","","",21],[10,"fill_buf","","",21],[10,"consume","","",21],[10,"read_line","","",21],[10,"read_until","","",21],[10,"read_char","","",21],[10,"write","core::result","",22],[10,"flush","","",22],[10,"flush","","",22],[10,"write_fmt","","",22],[10,"write_str","","",22],[10,"write_line","","",22],[10,"write_char","","",22],[10,"write_int","","",22],[10,"write_uint","","",22],[10,"write_le_uint","","",22],[10,"write_le_int","","",22],[10,"write_be_uint","","",22],[10,"write_be_int","","",22],[10,"write_be_u64","","",22],[10,"write_be_u32","","",22],[10,"write_be_u16","","",22],[10,"write_be_i64","","",22],[10,"write_be_i32","","",22],[10,"write_be_i16","","",22],[10,"write_be_f64","","",22],[10,"write_be_f32","","",22],[10,"write_le_u64","","",22],[10,"write_le_u32","","",22],[10,"write_le_u16","","",22],[10,"write_le_i64","","",22],[10,"write_le_i32","","",22],[10,"write_le_i16","","",22],[10,"write_le_f64","","",22],[10,"write_le_f32","","",22],[10,"write_u8","","",22],[10,"write_i8","","",22],[10,"read","","",22],[10,"read_at_least","","",22],[10,"read_byte","","",22],[10,"push","","",22],[10,"push_at_least","","",22],[10,"read_exact","","",22],[10,"read_to_end","","",22],[10,"read_to_string","","",22],[10,"read_le_uint_n","","",22],[10,"read_le_int_n","","",22],[10,"read_be_uint_n","","",22],[10,"read_be_int_n","","",22],[10,"read_le_uint","","",22],[10,"read_le_int","","",22],[10,"read_be_uint","","",22],[10,"read_be_int","","",22],[10,"read_be_u64","","",22],[10,"read_be_u32","","",22],[10,"read_be_u16","","",22],[10,"read_be_i64","","",22],[10,"read_be_i32","","",22],[10,"read_be_i16","","",22],[10,"read_be_f64","","",22],[10,"read_be_f32","","",22],[10,"read_le_u64","","",22],[10,"read_le_u32","","",22],[10,"read_le_u16","","",22],[10,"read_le_i64","","",22],[10,"read_le_i32","","",22],[10,"read_le_i16","","",22],[10,"read_le_f64","","",22],[10,"read_le_f32","","",22],[10,"read_u8","","",22],[10,"read_i8","","",22],[10,"tell","","",22],[10,"seek","","",22],[10,"listen","","",22],[10,"accept","","",22],[10,"incoming","","",22],[10,"new_in","std::io::tempfile","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",23],[10,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the suffix `suffix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",23],[10,"into_inner","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",23],[10,"unwrap","","Deprecated, use into_inner() instead",23],[10,"path","","Access the wrapped `std::path::Path` to the temporary directory.",23],[10,"close","","Close and remove the temporary directory",23],[10,"drop","","",23],[10,"new","std::io::extensions","Constructs a new byte iterator from the given Reader instance.",24],[10,"next","","",24],[10,"size_hint","","",24],[10,"as_inner","std::io::fs","",25],[10,"open_mode","","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",25],[10,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",25],[10,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",25],[10,"path","","Returns the original path which was used to open this file.",25],[10,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",25],[10,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use case which\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",25],[10,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",25],[10,"eof","","Returns true if the stream has reached the end of the file.",25],[10,"stat","","Queries information about the underlying file.",25],[10,"next","","",26],[10,"size_hint","","",26],[10,"read","","",25],[10,"read_at_least","","",25],[10,"read_byte","","",25],[10,"push","","",25],[10,"push_at_least","","",25],[10,"read_exact","","",25],[10,"read_to_end","","",25],[10,"read_to_string","","",25],[10,"read_le_uint_n","","",25],[10,"read_le_int_n","","",25],[10,"read_be_uint_n","","",25],[10,"read_be_int_n","","",25],[10,"read_le_uint","","",25],[10,"read_le_int","","",25],[10,"read_be_uint","","",25],[10,"read_be_int","","",25],[10,"read_be_u64","","",25],[10,"read_be_u32","","",25],[10,"read_be_u16","","",25],[10,"read_be_i64","","",25],[10,"read_be_i32","","",25],[10,"read_be_i16","","",25],[10,"read_be_f64","","",25],[10,"read_be_f32","","",25],[10,"read_le_u64","","",25],[10,"read_le_u32","","",25],[10,"read_le_u16","","",25],[10,"read_le_i64","","",25],[10,"read_le_i32","","",25],[10,"read_le_i16","","",25],[10,"read_le_f64","","",25],[10,"read_le_f32","","",25],[10,"read_u8","","",25],[10,"read_i8","","",25],[10,"write","","",25],[10,"flush","","",25],[10,"write_fmt","","",25],[10,"write_str","","",25],[10,"write_line","","",25],[10,"write_char","","",25],[10,"write_int","","",25],[10,"write_uint","","",25],[10,"write_le_uint","","",25],[10,"write_le_int","","",25],[10,"write_be_uint","","",25],[10,"write_be_int","","",25],[10,"write_be_u64","","",25],[10,"write_be_u32","","",25],[10,"write_be_u16","","",25],[10,"write_be_i64","","",25],[10,"write_be_i32","","",25],[10,"write_be_i16","","",25],[10,"write_be_f64","","",25],[10,"write_be_f32","","",25],[10,"write_le_u64","","",25],[10,"write_le_u32","","",25],[10,"write_le_u16","","",25],[10,"write_le_i64","","",25],[10,"write_le_i32","","",25],[10,"write_le_i16","","",25],[10,"write_le_f64","","",25],[10,"write_le_f32","","",25],[10,"write_u8","","",25],[10,"write_i8","","",25],[10,"tell","","",25],[10,"seek","","",25],[10,"stat","std::path::posix","",27],[10,"lstat","","",27],[10,"exists","","",27],[10,"is_file","","",27],[10,"is_dir","","",27],[10,"connect","std::io::net::tcp","Open a TCP connection to a remote host.",28],[10,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",28],[10,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",28],[10,"socket_name","","Returns the socket address of the local half of this TCP connection.",28],[10,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",28],[10,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",28],[10,"close_read","","Closes the reading half of this connection.",28],[10,"close_write","","Closes the writing half of this connection.",28],[10,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",28],[10,"set_read_timeout","","Sets the timeout for read operations on this stream.",28],[10,"set_write_timeout","","Sets the timeout for write operations on this stream.",28],[10,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",28],[10,"clone_from","","",28],[10,"read","","",28],[10,"read_at_least","","",28],[10,"read_byte","","",28],[10,"push","","",28],[10,"push_at_least","","",28],[10,"read_exact","","",28],[10,"read_to_end","","",28],[10,"read_to_string","","",28],[10,"read_le_uint_n","","",28],[10,"read_le_int_n","","",28],[10,"read_be_uint_n","","",28],[10,"read_be_int_n","","",28],[10,"read_le_uint","","",28],[10,"read_le_int","","",28],[10,"read_be_uint","","",28],[10,"read_be_int","","",28],[10,"read_be_u64","","",28],[10,"read_be_u32","","",28],[10,"read_be_u16","","",28],[10,"read_be_i64","","",28],[10,"read_be_i32","","",28],[10,"read_be_i16","","",28],[10,"read_be_f64","","",28],[10,"read_be_f32","","",28],[10,"read_le_u64","","",28],[10,"read_le_u32","","",28],[10,"read_le_u16","","",28],[10,"read_le_i64","","",28],[10,"read_le_i32","","",28],[10,"read_le_i16","","",28],[10,"read_le_f64","","",28],[10,"read_le_f32","","",28],[10,"read_u8","","",28],[10,"read_i8","","",28],[10,"write","","",28],[10,"flush","","",28],[10,"write_fmt","","",28],[10,"write_str","","",28],[10,"write_line","","",28],[10,"write_char","","",28],[10,"write_int","","",28],[10,"write_uint","","",28],[10,"write_le_uint","","",28],[10,"write_le_int","","",28],[10,"write_be_uint","","",28],[10,"write_be_int","","",28],[10,"write_be_u64","","",28],[10,"write_be_u32","","",28],[10,"write_be_u16","","",28],[10,"write_be_i64","","",28],[10,"write_be_i32","","",28],[10,"write_be_i16","","",28],[10,"write_be_f64","","",28],[10,"write_be_f32","","",28],[10,"write_le_u64","","",28],[10,"write_le_u32","","",28],[10,"write_le_u16","","",28],[10,"write_le_i64","","",28],[10,"write_le_i32","","",28],[10,"write_le_i16","","",28],[10,"write_le_f64","","",28],[10,"write_le_f32","","",28],[10,"write_u8","","",28],[10,"write_i8","","",28],[10,"as_inner","","",28],[10,"bind","","Creates a new `TcpListener` which will be bound to the specified address.\nThis listener is not ready for accepting connections, `listen` must be called\non it before that's possible.",29],[10,"socket_name","","Returns the local socket address of this listener.",29],[10,"listen","","",29],[10,"as_inner","","",29],[10,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",30],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",30],[10,"accept","","",30],[10,"incoming","","",30],[10,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",30],[10,"clone_from","","",30],[10,"as_inner","","",30],[10,"bind","std::io::net::udp","Creates a UDP socket from the given address.",31],[10,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",31],[10,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",31],[10,"connect","","Creates a `UdpStream`, which allows use of the `Reader` and `Writer`\ntraits to receive and send data from the same address. This transfers\nownership of the socket to the stream.",31],[10,"socket_name","","Returns the socket address that this socket was created from.",31],[10,"join_multicast","","Joins a multicast IP address (becomes a member of it)",31],[10,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",31],[10,"set_multicast_loop","","Set the multicast loop flag to the specified value",31],[10,"set_multicast_ttl","","Sets the multicast TTL",31],[10,"set_ttl","","Sets this socket's TTL",31],[10,"set_broadcast","","Sets the broadcast flag on or off",31],[10,"set_timeout","","Sets the read/write timeout for this socket.",31],[10,"set_read_timeout","","Sets the read timeout for this socket.",31],[10,"set_write_timeout","","Sets the write timeout for this socket.",31],[10,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",31],[10,"clone_from","","",31],[10,"as_inner","","",31],[10,"as_socket","","Allows access to the underlying UDP socket owned by this stream. This\nis useful to, for example, use the socket to send data to hosts other\nthan the one that this stream is connected to.",32],[10,"disconnect","","Consumes this UDP stream and returns out the underlying socket.",32],[10,"read","","Returns the next non-empty message from the specified address.",32],[10,"read_at_least","","",32],[10,"read_byte","","",32],[10,"push","","",32],[10,"push_at_least","","",32],[10,"read_exact","","",32],[10,"read_to_end","","",32],[10,"read_to_string","","",32],[10,"read_le_uint_n","","",32],[10,"read_le_int_n","","",32],[10,"read_be_uint_n","","",32],[10,"read_be_int_n","","",32],[10,"read_le_uint","","",32],[10,"read_le_int","","",32],[10,"read_be_uint","","",32],[10,"read_be_int","","",32],[10,"read_be_u64","","",32],[10,"read_be_u32","","",32],[10,"read_be_u16","","",32],[10,"read_be_i64","","",32],[10,"read_be_i32","","",32],[10,"read_be_i16","","",32],[10,"read_be_f64","","",32],[10,"read_be_f32","","",32],[10,"read_le_u64","","",32],[10,"read_le_u32","","",32],[10,"read_le_u16","","",32],[10,"read_le_i64","","",32],[10,"read_le_i32","","",32],[10,"read_le_i16","","",32],[10,"read_le_f64","","",32],[10,"read_le_f32","","",32],[10,"read_u8","","",32],[10,"read_i8","","",32],[10,"write","","",32],[10,"flush","","",32],[10,"write_fmt","","",32],[10,"write_str","","",32],[10,"write_line","","",32],[10,"write_char","","",32],[10,"write_int","","",32],[10,"write_uint","","",32],[10,"write_le_uint","","",32],[10,"write_le_int","","",32],[10,"write_be_uint","","",32],[10,"write_be_int","","",32],[10,"write_be_u64","","",32],[10,"write_be_u32","","",32],[10,"write_be_u16","","",32],[10,"write_be_i64","","",32],[10,"write_be_i32","","",32],[10,"write_be_i16","","",32],[10,"write_be_f64","","",32],[10,"write_be_f32","","",32],[10,"write_le_u64","","",32],[10,"write_le_u32","","",32],[10,"write_le_u16","","",32],[10,"write_le_i64","","",32],[10,"write_le_i32","","",32],[10,"write_le_i16","","",32],[10,"write_le_f64","","",32],[10,"write_le_f32","","",32],[10,"write_u8","","",32],[10,"write_i8","","",32],[10,"hash","std::io::net::ip","",33],[10,"clone","","",33],[10,"clone_from","","",33],[10,"assert_receiver_is_total_eq","","",33],[10,"eq","","",33],[10,"ne","","",33],[10,"ne","","",33],[10,"fmt","","",33],[10,"hash","","",34],[10,"clone","","",34],[10,"clone_from","","",34],[10,"assert_receiver_is_total_eq","","",34],[10,"eq","","",34],[10,"ne","","",34],[10,"ne","","",34],[10,"fmt","","",34],[10,"from_str","","",33],[10,"from_str","","",34],[10,"to_socket_addr","","",34],[10,"to_socket_addr","","",34],[10,"to_socket_addr_all","","",34],[10,"connect","std::io::net::pipe","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",35],[10,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",35],[10,"close_read","","Closes the reading half of this connection.",35],[10,"close_write","","Closes the writing half of this connection.",35],[10,"set_timeout","","Sets the read/write timeout for this socket.",35],[10,"set_read_timeout","","Sets the read timeout for this socket.",35],[10,"set_write_timeout","","Sets the write timeout for this socket.",35],[10,"clone","","",35],[10,"clone_from","","",35],[10,"read","","",35],[10,"read_at_least","","",35],[10,"read_byte","","",35],[10,"push","","",35],[10,"push_at_least","","",35],[10,"read_exact","","",35],[10,"read_to_end","","",35],[10,"read_to_string","","",35],[10,"read_le_uint_n","","",35],[10,"read_le_int_n","","",35],[10,"read_be_uint_n","","",35],[10,"read_be_int_n","","",35],[10,"read_le_uint","","",35],[10,"read_le_int","","",35],[10,"read_be_uint","","",35],[10,"read_be_int","","",35],[10,"read_be_u64","","",35],[10,"read_be_u32","","",35],[10,"read_be_u16","","",35],[10,"read_be_i64","","",35],[10,"read_be_i32","","",35],[10,"read_be_i16","","",35],[10,"read_be_f64","","",35],[10,"read_be_f32","","",35],[10,"read_le_u64","","",35],[10,"read_le_u32","","",35],[10,"read_le_u16","","",35],[10,"read_le_i64","","",35],[10,"read_le_i32","","",35],[10,"read_le_i16","","",35],[10,"read_le_f64","","",35],[10,"read_le_f32","","",35],[10,"read_u8","","",35],[10,"read_i8","","",35],[10,"write","","",35],[10,"flush","","",35],[10,"write_fmt","","",35],[10,"write_str","","",35],[10,"write_line","","",35],[10,"write_char","","",35],[10,"write_int","","",35],[10,"write_uint","","",35],[10,"write_le_uint","","",35],[10,"write_le_int","","",35],[10,"write_be_uint","","",35],[10,"write_be_int","","",35],[10,"write_be_u64","","",35],[10,"write_be_u32","","",35],[10,"write_be_u16","","",35],[10,"write_be_i64","","",35],[10,"write_be_i32","","",35],[10,"write_be_i16","","",35],[10,"write_be_f64","","",35],[10,"write_be_f32","","",35],[10,"write_le_u64","","",35],[10,"write_le_u32","","",35],[10,"write_le_u16","","",35],[10,"write_le_i64","","",35],[10,"write_le_i32","","",35],[10,"write_le_i16","","",35],[10,"write_le_f64","","",35],[10,"write_le_f32","","",35],[10,"write_u8","","",35],[10,"write_i8","","",35],[10,"as_inner","","",35],[10,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",36],[10,"listen","","",36],[10,"as_inner","","",36],[10,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",37],[10,"close_accept","","Closes the accepting capabilities of this acceptor.",37],[10,"accept","","",37],[10,"incoming","","",37],[10,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",37],[10,"clone_from","","",37],[10,"as_inner","","",37],[10,"open","std::io::pipe","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",38],[10,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",38],[10,"as_inner","","",38],[10,"clone","","",38],[10,"clone_from","","",38],[10,"read","","",38],[10,"read_at_least","","",38],[10,"read_byte","","",38],[10,"push","","",38],[10,"push_at_least","","",38],[10,"read_exact","","",38],[10,"read_to_end","","",38],[10,"read_to_string","","",38],[10,"read_le_uint_n","","",38],[10,"read_le_int_n","","",38],[10,"read_be_uint_n","","",38],[10,"read_be_int_n","","",38],[10,"read_le_uint","","",38],[10,"read_le_int","","",38],[10,"read_be_uint","","",38],[10,"read_be_int","","",38],[10,"read_be_u64","","",38],[10,"read_be_u32","","",38],[10,"read_be_u16","","",38],[10,"read_be_i64","","",38],[10,"read_be_i32","","",38],[10,"read_be_i16","","",38],[10,"read_be_f64","","",38],[10,"read_be_f32","","",38],[10,"read_le_u64","","",38],[10,"read_le_u32","","",38],[10,"read_le_u16","","",38],[10,"read_le_i64","","",38],[10,"read_le_i32","","",38],[10,"read_le_i16","","",38],[10,"read_le_f64","","",38],[10,"read_le_f32","","",38],[10,"read_u8","","",38],[10,"read_i8","","",38],[10,"write","","",38],[10,"flush","","",38],[10,"write_fmt","","",38],[10,"write_str","","",38],[10,"write_line","","",38],[10,"write_char","","",38],[10,"write_int","","",38],[10,"write_uint","","",38],[10,"write_le_uint","","",38],[10,"write_le_int","","",38],[10,"write_be_uint","","",38],[10,"write_be_int","","",38],[10,"write_be_u64","","",38],[10,"write_be_u32","","",38],[10,"write_be_u16","","",38],[10,"write_be_i64","","",38],[10,"write_be_i32","","",38],[10,"write_be_i16","","",38],[10,"write_be_f64","","",38],[10,"write_be_f32","","",38],[10,"write_le_u64","","",38],[10,"write_le_u32","","",38],[10,"write_le_u16","","",38],[10,"write_le_i64","","",38],[10,"write_le_i32","","",38],[10,"write_le_i16","","",38],[10,"write_le_f64","","",38],[10,"write_le_f32","","",38],[10,"write_u8","","",38],[10,"write_i8","","",38],[10,"fmt","std::io::process","",39],[10,"clone","","",39],[10,"clone_from","","",39],[10,"hash","","",39],[10,"assert_receiver_is_total_eq","","",39],[10,"eq","","",39],[10,"ne","","",39],[10,"ne","","",39],[10,"container_as_bytes","","",39],[10,"container_as_str","","",39],[10,"is_str","","",39],[10,"clone","","",40],[10,"clone_from","","",40],[10,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",40],[10,"arg","","Add an argument to pass to the program.",40],[10,"args","","Add multiple arguments to pass to the program.",40],[10,"env","","Inserts or updates an environment variable mapping.",40],[10,"env_remove","","Removes an environment variable mapping.",40],[10,"env_set_all","","Sets the entire environment map for the child process.",40],[10,"cwd","","Set the working directory for the child process.",40],[10,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",40],[10,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",40],[10,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",40],[10,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",40],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",40],[10,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",40],[10,"spawn","","Executes the command as a child process, which is returned.",40],[10,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",40],[10,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",40],[10,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",40],[10,"program","","",40],[10,"args","","",40],[10,"env","","",40],[10,"cwd","","",40],[10,"uid","","",40],[10,"gid","","",40],[10,"detach","","",40],[10,"clone","","",41],[10,"clone_from","","",41],[10,"assert_receiver_is_total_eq","","",41],[10,"eq","","",41],[10,"ne","","",41],[10,"ne","","",41],[10,"clone","","",42],[10,"clone_from","","",42],[10,"clone","","",43],[10,"clone_from","","",43],[10,"assert_receiver_is_total_eq","","",43],[10,"eq","","",43],[10,"ne","","",43],[10,"ne","","",43],[10,"fmt","","Format a ProcessExit enum, to nicely present the information.",43],[10,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",43],[10,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",43],[10,"kill","","Sends `signal` to another process in the system identified by `id`.",44],[10,"id","","Returns the process id of this child process",44],[10,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",44],[10,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",44],[10,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",44],[10,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",44],[10,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",44],[10,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",44],[10,"forget","","Forgets this process, allowing it to outlive the parent",44],[10,"drop","","",44],[10,"clone","std::io::stdio","",45],[10,"clone_from","","",45],[10,"deref","","",46],[10,"deref_mut","","",46],[10,"lock","","Locks the `StdinReader`, granting the calling thread exclusive access\nto the underlying `BufferedReader`.",45],[10,"read_line","","Like `Buffer::read_line`.",45],[10,"read_until","","Like `Buffer::read_until`.",45],[10,"read_char","","Like `Buffer::read_char`.",45],[10,"read","","",45],[10,"read_at_least","","",45],[10,"push_at_least","","",45],[10,"read_to_end","","",45],[10,"read_le_uint_n","","",45],[10,"read_be_uint_n","","",45],[10,"read_at_least","","",45],[10,"read_byte","","",45],[10,"push","","",45],[10,"push_at_least","","",45],[10,"read_exact","","",45],[10,"read_to_end","","",45],[10,"read_to_string","","",45],[10,"read_le_uint_n","","",45],[10,"read_le_int_n","","",45],[10,"read_be_uint_n","","",45],[10,"read_be_int_n","","",45],[10,"read_le_uint","","",45],[10,"read_le_int","","",45],[10,"read_be_uint","","",45],[10,"read_be_int","","",45],[10,"read_be_u64","","",45],[10,"read_be_u32","","",45],[10,"read_be_u16","","",45],[10,"read_be_i64","","",45],[10,"read_be_i32","","",45],[10,"read_be_i16","","",45],[10,"read_be_f64","","",45],[10,"read_be_f32","","",45],[10,"read_le_u64","","",45],[10,"read_le_u32","","",45],[10,"read_le_u16","","",45],[10,"read_le_i64","","",45],[10,"read_le_i32","","",45],[10,"read_le_i16","","",45],[10,"read_le_f64","","",45],[10,"read_le_f32","","",45],[10,"read_u8","","",45],[10,"read_i8","","",45],[10,"isatty","","Returns whether this stream is attached to a TTY instance or not.",47],[10,"read","","",47],[10,"read_at_least","","",47],[10,"read_byte","","",47],[10,"push","","",47],[10,"push_at_least","","",47],[10,"read_exact","","",47],[10,"read_to_end","","",47],[10,"read_to_string","","",47],[10,"read_le_uint_n","","",47],[10,"read_le_int_n","","",47],[10,"read_be_uint_n","","",47],[10,"read_be_int_n","","",47],[10,"read_le_uint","","",47],[10,"read_le_int","","",47],[10,"read_be_uint","","",47],[10,"read_be_int","","",47],[10,"read_be_u64","","",47],[10,"read_be_u32","","",47],[10,"read_be_u16","","",47],[10,"read_be_i64","","",47],[10,"read_be_i32","","",47],[10,"read_be_i16","","",47],[10,"read_be_f64","","",47],[10,"read_be_f32","","",47],[10,"read_le_u64","","",47],[10,"read_le_u32","","",47],[10,"read_le_u16","","",47],[10,"read_le_i64","","",47],[10,"read_le_i32","","",47],[10,"read_le_i16","","",47],[10,"read_le_f64","","",47],[10,"read_le_f32","","",47],[10,"read_u8","","",47],[10,"read_i8","","",47],[10,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",48],[10,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",48],[10,"isatty","","Returns whether this stream is attached to a TTY instance or not.",48],[10,"write","","",48],[10,"flush","","",48],[10,"write_fmt","","",48],[10,"write_str","","",48],[10,"write_line","","",48],[10,"write_char","","",48],[10,"write_int","","",48],[10,"write_uint","","",48],[10,"write_le_uint","","",48],[10,"write_le_int","","",48],[10,"write_be_uint","","",48],[10,"write_be_int","","",48],[10,"write_be_u64","","",48],[10,"write_be_u32","","",48],[10,"write_be_u16","","",48],[10,"write_be_i64","","",48],[10,"write_be_i32","","",48],[10,"write_be_i16","","",48],[10,"write_be_f64","","",48],[10,"write_be_f32","","",48],[10,"write_le_u64","","",48],[10,"write_le_u32","","",48],[10,"write_le_u16","","",48],[10,"write_le_i64","","",48],[10,"write_le_i32","","",48],[10,"write_le_i16","","",48],[10,"write_le_f64","","",48],[10,"write_le_f32","","",48],[10,"write_u8","","",48],[10,"write_i8","","",48],[10,"new","std::io::timer","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",49],[10,"sleep","","Blocks the current task for the specified duration.",49],[10,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",49],[10,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",49],[10,"call","","",50],[10,"new","std::io::util","Creates a new `LimitReader`",51],[10,"into_inner","","Consumes the `LimitReader`, returning the underlying `Reader`.",51],[10,"unwrap","","Deprecated, use into_inner() instead",51],[10,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",51],[10,"read","","",51],[10,"read_at_least","","",51],[10,"read_byte","","",51],[10,"push","","",51],[10,"push_at_least","","",51],[10,"read_exact","","",51],[10,"read_to_end","","",51],[10,"read_to_string","","",51],[10,"read_le_uint_n","","",51],[10,"read_le_int_n","","",51],[10,"read_be_uint_n","","",51],[10,"read_be_int_n","","",51],[10,"read_le_uint","","",51],[10,"read_le_int","","",51],[10,"read_be_uint","","",51],[10,"read_be_int","","",51],[10,"read_be_u64","","",51],[10,"read_be_u32","","",51],[10,"read_be_u16","","",51],[10,"read_be_i64","","",51],[10,"read_be_i32","","",51],[10,"read_be_i16","","",51],[10,"read_be_f64","","",51],[10,"read_be_f32","","",51],[10,"read_le_u64","","",51],[10,"read_le_u32","","",51],[10,"read_le_u16","","",51],[10,"read_le_i64","","",51],[10,"read_le_i32","","",51],[10,"read_le_i16","","",51],[10,"read_le_f64","","",51],[10,"read_le_f32","","",51],[10,"read_u8","","",51],[10,"read_i8","","",51],[10,"fill_buf","","",51],[10,"consume","","",51],[10,"read_line","","",51],[10,"read_until","","",51],[10,"read_char","","",51],[10,"write","","",52],[10,"flush","","",52],[10,"write_fmt","","",52],[10,"write_str","","",52],[10,"write_line","","",52],[10,"write_char","","",52],[10,"write_int","","",52],[10,"write_uint","","",52],[10,"write_le_uint","","",52],[10,"write_le_int","","",52],[10,"write_be_uint","","",52],[10,"write_be_int","","",52],[10,"write_be_u64","","",52],[10,"write_be_u32","","",52],[10,"write_be_u16","","",52],[10,"write_be_i64","","",52],[10,"write_be_i32","","",52],[10,"write_be_i16","","",52],[10,"write_be_f64","","",52],[10,"write_be_f32","","",52],[10,"write_le_u64","","",52],[10,"write_le_u32","","",52],[10,"write_le_u16","","",52],[10,"write_le_i64","","",52],[10,"write_le_i32","","",52],[10,"write_le_i16","","",52],[10,"write_le_f64","","",52],[10,"write_le_f32","","",52],[10,"write_u8","","",52],[10,"write_i8","","",52],[10,"read","","",53],[10,"read_at_least","","",53],[10,"read_byte","","",53],[10,"push","","",53],[10,"push_at_least","","",53],[10,"read_exact","","",53],[10,"read_to_end","","",53],[10,"read_to_string","","",53],[10,"read_le_uint_n","","",53],[10,"read_le_int_n","","",53],[10,"read_be_uint_n","","",53],[10,"read_be_int_n","","",53],[10,"read_le_uint","","",53],[10,"read_le_int","","",53],[10,"read_be_uint","","",53],[10,"read_be_int","","",53],[10,"read_be_u64","","",53],[10,"read_be_u32","","",53],[10,"read_be_u16","","",53],[10,"read_be_i64","","",53],[10,"read_be_i32","","",53],[10,"read_be_i16","","",53],[10,"read_be_f64","","",53],[10,"read_be_f32","","",53],[10,"read_le_u64","","",53],[10,"read_le_u32","","",53],[10,"read_le_u16","","",53],[10,"read_le_i64","","",53],[10,"read_le_i32","","",53],[10,"read_le_i16","","",53],[10,"read_le_f64","","",53],[10,"read_le_f32","","",53],[10,"read_u8","","",53],[10,"read_i8","","",53],[10,"fill_buf","","",53],[10,"consume","","",53],[10,"read_line","","",53],[10,"read_until","","",53],[10,"read_char","","",53],[10,"read","","",54],[10,"read_at_least","","",54],[10,"read_byte","","",54],[10,"push","","",54],[10,"push_at_least","","",54],[10,"read_exact","","",54],[10,"read_to_end","","",54],[10,"read_to_string","","",54],[10,"read_le_uint_n","","",54],[10,"read_le_int_n","","",54],[10,"read_be_uint_n","","",54],[10,"read_be_int_n","","",54],[10,"read_le_uint","","",54],[10,"read_le_int","","",54],[10,"read_be_uint","","",54],[10,"read_be_int","","",54],[10,"read_be_u64","","",54],[10,"read_be_u32","","",54],[10,"read_be_u16","","",54],[10,"read_be_i64","","",54],[10,"read_be_i32","","",54],[10,"read_be_i16","","",54],[10,"read_be_f64","","",54],[10,"read_be_f32","","",54],[10,"read_le_u64","","",54],[10,"read_le_u32","","",54],[10,"read_le_u16","","",54],[10,"read_le_i64","","",54],[10,"read_le_i32","","",54],[10,"read_le_i16","","",54],[10,"read_le_f64","","",54],[10,"read_le_f32","","",54],[10,"read_u8","","",54],[10,"read_i8","","",54],[10,"fill_buf","","",54],[10,"consume","","",54],[10,"read_line","","",54],[10,"read_until","","",54],[10,"read_char","","",54],[10,"new","","Creates a new `MultiWriter`",55],[10,"write","","",55],[10,"flush","","",55],[10,"flush","","",55],[10,"write_fmt","","",55],[10,"write_str","","",55],[10,"write_line","","",55],[10,"write_char","","",55],[10,"write_int","","",55],[10,"write_uint","","",55],[10,"write_le_uint","","",55],[10,"write_le_int","","",55],[10,"write_be_uint","","",55],[10,"write_be_int","","",55],[10,"write_be_u64","","",55],[10,"write_be_u32","","",55],[10,"write_be_u16","","",55],[10,"write_be_i64","","",55],[10,"write_be_i32","","",55],[10,"write_be_i16","","",55],[10,"write_be_f64","","",55],[10,"write_be_f32","","",55],[10,"write_le_u64","","",55],[10,"write_le_u32","","",55],[10,"write_le_u16","","",55],[10,"write_le_i64","","",55],[10,"write_le_i32","","",55],[10,"write_le_i16","","",55],[10,"write_le_f64","","",55],[10,"write_le_f32","","",55],[10,"write_u8","","",55],[10,"write_i8","","",55],[10,"new","","Creates a new `ChainedReader`",56],[10,"read","","",56],[10,"read_at_least","","",56],[10,"read_byte","","",56],[10,"push","","",56],[10,"push_at_least","","",56],[10,"read_exact","","",56],[10,"read_to_end","","",56],[10,"read_to_string","","",56],[10,"read_le_uint_n","","",56],[10,"read_le_int_n","","",56],[10,"read_be_uint_n","","",56],[10,"read_be_int_n","","",56],[10,"read_le_uint","","",56],[10,"read_le_int","","",56],[10,"read_be_uint","","",56],[10,"read_be_int","","",56],[10,"read_be_u64","","",56],[10,"read_be_u32","","",56],[10,"read_be_u16","","",56],[10,"read_be_i64","","",56],[10,"read_be_i32","","",56],[10,"read_be_i16","","",56],[10,"read_be_f64","","",56],[10,"read_be_f32","","",56],[10,"read_le_u64","","",56],[10,"read_le_u32","","",56],[10,"read_le_u16","","",56],[10,"read_le_i64","","",56],[10,"read_le_i32","","",56],[10,"read_le_i16","","",56],[10,"read_le_f64","","",56],[10,"read_le_f32","","",56],[10,"read_u8","","",56],[10,"read_i8","","",56],[10,"new","","Creates a new `TeeReader`",57],[10,"into_inner","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",57],[10,"unwrap","","Deprecated, use into_inner() instead",57],[10,"read","","",57],[10,"read_at_least","","",57],[10,"read_byte","","",57],[10,"push","","",57],[10,"push_at_least","","",57],[10,"read_exact","","",57],[10,"read_to_end","","",57],[10,"read_to_string","","",57],[10,"read_le_uint_n","","",57],[10,"read_le_int_n","","",57],[10,"read_be_uint_n","","",57],[10,"read_be_int_n","","",57],[10,"read_le_uint","","",57],[10,"read_le_int","","",57],[10,"read_be_uint","","",57],[10,"read_be_int","","",57],[10,"read_be_u64","","",57],[10,"read_be_u32","","",57],[10,"read_be_u16","","",57],[10,"read_be_i64","","",57],[10,"read_be_i32","","",57],[10,"read_be_i16","","",57],[10,"read_be_f64","","",57],[10,"read_be_f32","","",57],[10,"read_le_u64","","",57],[10,"read_le_u32","","",57],[10,"read_le_u16","","",57],[10,"read_le_i64","","",57],[10,"read_le_i32","","",57],[10,"read_le_i16","","",57],[10,"read_le_f64","","",57],[10,"read_le_f32","","",57],[10,"read_u8","","",57],[10,"read_i8","","",57],[10,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",58],[10,"read","","",58],[10,"read_at_least","","",58],[10,"read_byte","","",58],[10,"push","","",58],[10,"push_at_least","","",58],[10,"read_exact","","",58],[10,"read_to_end","","",58],[10,"read_to_string","","",58],[10,"read_le_uint_n","","",58],[10,"read_le_int_n","","",58],[10,"read_be_uint_n","","",58],[10,"read_be_int_n","","",58],[10,"read_le_uint","","",58],[10,"read_le_int","","",58],[10,"read_be_uint","","",58],[10,"read_be_int","","",58],[10,"read_be_u64","","",58],[10,"read_be_u32","","",58],[10,"read_be_u16","","",58],[10,"read_be_i64","","",58],[10,"read_be_i32","","",58],[10,"read_be_i16","","",58],[10,"read_be_f64","","",58],[10,"read_be_f32","","",58],[10,"read_le_u64","","",58],[10,"read_le_u32","","",58],[10,"read_le_u16","","",58],[10,"read_le_i64","","",58],[10,"read_le_i32","","",58],[10,"read_le_i16","","",58],[10,"read_le_f64","","",58],[10,"read_le_f32","","",58],[10,"read_u8","","",58],[10,"read_i8","","",58],[10,"clone","std::io","",59],[10,"clone_from","","",59],[10,"assert_receiver_is_total_eq","","",59],[10,"eq","","",59],[10,"ne","","",59],[10,"ne","","",59],[10,"from_errno","","Convert an `errno` value into an `IoError`.",59],[10,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",59],[10,"fmt","","",59],[10,"description","","",59],[10,"detail","","",59],[10,"detail","","",59],[10,"cause","","",59],[10,"from_error","alloc::boxed","",60],[10,"fmt","std::io","",61],[10,"clone","","",61],[10,"clone_from","","",61],[10,"assert_receiver_is_total_eq","","",61],[10,"eq","","",61],[10,"ne","","",61],[10,"ne","","",61],[10,"update_err","core::result","",22],[10,"update_detail","","",22],[10,"update_desc","","",22],[10,"read","alloc::boxed","",60],[10,"read_at_least","","",60],[10,"read_byte","","",60],[10,"push","","",60],[10,"push_at_least","","",60],[10,"read_exact","","",60],[10,"read_to_end","","",60],[10,"read_to_string","","",60],[10,"read_le_uint_n","","",60],[10,"read_le_int_n","","",60],[10,"read_be_uint_n","","",60],[10,"read_be_int_n","","",60],[10,"read_le_uint","","",60],[10,"read_le_int","","",60],[10,"read_be_uint","","",60],[10,"read_be_int","","",60],[10,"read_be_u64","","",60],[10,"read_be_u32","","",60],[10,"read_be_u16","","",60],[10,"read_be_i64","","",60],[10,"read_be_i32","","",60],[10,"read_be_i16","","",60],[10,"read_be_f64","","",60],[10,"read_be_f32","","",60],[10,"read_le_u64","","",60],[10,"read_le_u32","","",60],[10,"read_le_u16","","",60],[10,"read_le_i64","","",60],[10,"read_le_i32","","",60],[10,"read_le_i16","","",60],[10,"read_le_f64","","",60],[10,"read_le_f32","","",60],[10,"read_u8","","",60],[10,"read_i8","","",60],[10,"read","std::io","",62],[10,"read_at_least","","",62],[10,"read_byte","","",62],[10,"push","","",62],[10,"push_at_least","","",62],[10,"read_exact","","",62],[10,"read_to_end","","",62],[10,"read_to_string","","",62],[10,"read_le_uint_n","","",62],[10,"read_le_int_n","","",62],[10,"read_be_uint_n","","",62],[10,"read_be_int_n","","",62],[10,"read_le_uint","","",62],[10,"read_le_int","","",62],[10,"read_be_uint","","",62],[10,"read_be_int","","",62],[10,"read_be_u64","","",62],[10,"read_be_u32","","",62],[10,"read_be_u16","","",62],[10,"read_be_i64","","",62],[10,"read_be_i32","","",62],[10,"read_be_i16","","",62],[10,"read_be_f64","","",62],[10,"read_be_f32","","",62],[10,"read_le_u64","","",62],[10,"read_le_u32","","",62],[10,"read_le_u16","","",62],[10,"read_le_i64","","",62],[10,"read_le_i32","","",62],[10,"read_le_i16","","",62],[10,"read_le_f64","","",62],[10,"read_le_f32","","",62],[10,"read_u8","","",62],[10,"read_i8","","",62],[10,"fill_buf","","",62],[10,"consume","","",62],[10,"read_line","","",62],[10,"read_until","","",62],[10,"read_char","","",62],[10,"write","alloc::boxed","",60],[10,"flush","","",60],[10,"flush","","",60],[10,"write_fmt","","",60],[10,"write_str","","",60],[10,"write_line","","",60],[10,"write_char","","",60],[10,"write_int","","",60],[10,"write_uint","","",60],[10,"write_le_uint","","",60],[10,"write_le_int","","",60],[10,"write_be_uint","","",60],[10,"write_be_int","","",60],[10,"write_be_u64","","",60],[10,"write_be_u32","","",60],[10,"write_be_u16","","",60],[10,"write_be_i64","","",60],[10,"write_be_i32","","",60],[10,"write_be_i16","","",60],[10,"write_be_f64","","",60],[10,"write_be_f32","","",60],[10,"write_le_u64","","",60],[10,"write_le_u32","","",60],[10,"write_le_u16","","",60],[10,"write_le_i64","","",60],[10,"write_le_i32","","",60],[10,"write_le_i16","","",60],[10,"write_le_f64","","",60],[10,"write_le_f32","","",60],[10,"write_u8","","",60],[10,"write_i8","","",60],[10,"write","std::io","",63],[10,"flush","","",63],[10,"flush","","",63],[10,"write_fmt","","",63],[10,"write_str","","",63],[10,"write_line","","",63],[10,"write_char","","",63],[10,"write_int","","",63],[10,"write_uint","","",63],[10,"write_le_uint","","",63],[10,"write_le_int","","",63],[10,"write_be_uint","","",63],[10,"write_be_int","","",63],[10,"write_be_u64","","",63],[10,"write_be_u32","","",63],[10,"write_be_u16","","",63],[10,"write_be_i64","","",63],[10,"write_be_i32","","",63],[10,"write_be_i16","","",63],[10,"write_be_f64","","",63],[10,"write_be_f32","","",63],[10,"write_le_u64","","",63],[10,"write_le_u32","","",63],[10,"write_le_u16","","",63],[10,"write_le_i64","","",63],[10,"write_le_i32","","",63],[10,"write_le_i16","","",63],[10,"write_le_f64","","",63],[10,"write_le_f32","","",63],[10,"write_u8","","",63],[10,"write_i8","","",63],[10,"next","","",64],[10,"size_hint","","",64],[10,"next","","",65],[10,"size_hint","","",65],[10,"next","","",66],[10,"size_hint","","",66],[10,"clone","","",67],[10,"clone_from","","",67],[10,"hash","","",67],[10,"fmt","","",67],[10,"eq","","",67],[10,"ne","","",67],[10,"ne","","",67],[10,"hash","","",68],[10,"hash","","",69],[10,"hash","","",70],[10,"cmp","","",70],[10,"partial_cmp","","",70],[10,"lt","","",70],[10,"le","","",70],[10,"gt","","",70],[10,"ge","","",70],[10,"lt","","",70],[10,"le","","",70],[10,"gt","","",70],[10,"ge","","",70],[10,"clone","","",70],[10,"clone_from","","",70],[10,"assert_receiver_is_total_eq","","",70],[10,"eq","","",70],[10,"ne","","",70],[10,"ne","","",70],[10,"empty","","Returns an empty set of flags.",70],[10,"all","","Returns the set containing all flags.",70],[10,"bits","","Returns the raw value of the flags currently stored.",70],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",70],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",70],[10,"is_empty","","Returns `true` if no flags are currently stored.",70],[10,"is_all","","Returns `true` if all flags are currently set.",70],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",70],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",70],[10,"insert","","Inserts the specified flags in-place.",70],[10,"remove","","Removes the specified flags in-place.",70],[10,"toggle","","Toggles the specified flags in-place.",70],[10,"bitor","","Returns the union of the two sets of flags.",70],[10,"bitxor","","Returns the left flags, but with all the right flags toggled.",70],[10,"bitand","","Returns the intersection between the two sets of flags.",70],[10,"sub","","Returns the set difference of the two sets of flags.",70],[10,"not","","Returns the complement of this set of flags.",70],[10,"default","","",70],[10,"fmt","","",70],[10,"fmt","std::os","",71],[10,"description","","",71],[10,"detail","","",71],[10,"detail","","",71],[10,"cause","","",71],[10,"from_error","alloc::boxed","",60],[10,"new","std::os","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",72],[10,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",72],[10,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",72],[10,"data","","Returns the pointer to the memory created or modified by this map.",72],[10,"len","","Returns the number of bytes this map applies to.",72],[10,"kind","","Returns the type of mapping this represents.",72],[10,"as_raw_fd","std::io::fs","",25],[10,"as_raw_fd","std::io::pipe","",38],[10,"as_raw_fd","std::io::net::pipe","",35],[10,"as_raw_fd","","",36],[10,"as_raw_fd","","",37],[10,"as_raw_fd","std::io::net::tcp","",28],[10,"as_raw_fd","","",29],[10,"as_raw_fd","","",30],[10,"as_raw_fd","std::io::net::udp","",31],[10,"clone","std::path::posix","",27],[10,"clone_from","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"assert_receiver_is_total_eq","","",27],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"cmp","","",27],[10,"from_str","","",27],[10,"to_c_str","","",27],[10,"to_c_str_unchecked","","",27],[10,"with_c_str","","",27],[10,"with_c_str_unchecked","","",27],[10,"hash","","",27],[10,"container_as_bytes","","",27],[10,"container_as_str","","",27],[10,"is_str","","",27],[10,"new_unchecked","","",27],[10,"set_filename_unchecked","","",27],[10,"push_unchecked","","",27],[10,"as_vec","","",27],[10,"into_vec","","",27],[10,"dirname","","",27],[10,"filename","","",27],[10,"pop","","",27],[10,"root_path","","",27],[10,"is_absolute","","",27],[10,"is_ancestor_of","","",27],[10,"path_relative_from","","",27],[10,"ends_with_path","","",27],[10,"new","","",27],[10,"new_opt","","",27],[10,"as_str","","",27],[10,"display","","",27],[10,"filename_display","","",27],[10,"dirname_str","","",27],[10,"filename_str","","",27],[10,"filestem","","",27],[10,"filestem_str","","",27],[10,"extension","","",27],[10,"extension_str","","",27],[10,"set_filename","","",27],[10,"set_extension","","",27],[10,"with_filename","","",27],[10,"with_extension","","",27],[10,"dir_path","","",27],[10,"push","","",27],[10,"push_many","","",27],[10,"join","","",27],[10,"join_many","","",27],[10,"is_relative","","",27],[10,"new","","Returns a new Path from a byte vector or string",27],[10,"new_opt","","Returns a new Path from a byte vector or string, if possible",27],[10,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",27],[10,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",27],[10,"clone","std::path::windows","",73],[10,"clone_from","","",73],[10,"eq","","",73],[10,"ne","","",73],[10,"assert_receiver_is_total_eq","","",73],[10,"partial_cmp","","",73],[10,"lt","","",73],[10,"le","","",73],[10,"gt","","",73],[10,"ge","","",73],[10,"cmp","","",73],[10,"from_str","","",73],[10,"to_c_str","","",73],[10,"to_c_str_unchecked","","",73],[10,"with_c_str","","",73],[10,"with_c_str_unchecked","","",73],[10,"hash","","",73],[10,"container_as_bytes","","",73],[10,"container_as_str","","",73],[10,"is_str","","",73],[10,"container_as_str","","",73],[10,"is_str","","",73],[10,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",73],[10,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",73],[10,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",73],[10,"new_opt","","",73],[10,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",73],[10,"as_vec","","",73],[10,"into_vec","","",73],[10,"dirname","","",73],[10,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",73],[10,"filename","","",73],[10,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",73],[10,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",73],[10,"extension_str","","",73],[10,"dir_path","","",73],[10,"pop","","",73],[10,"root_path","","",73],[10,"is_absolute","","See `GenericPath::is_absolute` for info.",73],[10,"is_relative","","",73],[10,"is_ancestor_of","","",73],[10,"path_relative_from","","",73],[10,"ends_with_path","","",73],[10,"new","","",73],[10,"new_opt","","",73],[10,"as_str","","",73],[10,"display","","",73],[10,"filename_display","","",73],[10,"dirname_str","","",73],[10,"filename_str","","",73],[10,"filestem","","",73],[10,"filestem_str","","",73],[10,"extension","","",73],[10,"extension_str","","",73],[10,"set_filename","","",73],[10,"set_extension","","",73],[10,"with_filename","","",73],[10,"with_extension","","",73],[10,"dir_path","","",73],[10,"push","","",73],[10,"push_many","","",73],[10,"join","","",73],[10,"join_many","","",73],[10,"is_relative","","",73],[10,"new","","Returns a new `Path` from a `BytesContainer`.",73],[10,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",73],[10,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",73],[10,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",73],[10,"fmt","","",74],[10,"clone","","",74],[10,"clone_from","","",74],[10,"eq","","",74],[10,"ne","","",74],[10,"ne","","",74],[10,"fmt","std::path","",75],[10,"as_cow","","Returns the path as a possibly-owned string.",75],[10,"container_as_bytes","collections::string","",3],[10,"container_as_str","","",3],[10,"is_str","","",3],[10,"container_as_str","","",3],[10,"is_str","","",3],[10,"container_as_bytes","collections::vec","",4],[10,"container_as_str","","",4],[10,"is_str","","",4],[10,"container_as_bytes","rustrt::c_str","",76],[10,"container_as_str","","",76],[10,"is_str","","",76],[10,"container_as_bytes","collections::str","",77],[10,"container_as_str","","",77],[10,"is_str","","",77],[10,"container_as_str","","",77],[10,"is_str","","",77],[10,"new","std::rand::os::imp","Create a new `OsRng`.",78],[10,"next_u32","","",78],[10,"next_u64","","",78],[10,"fill_bytes","","",78],[10,"next_u64","","",78],[10,"next_f32","","",78],[10,"next_f64","","",78],[10,"fill_bytes","","",78],[10,"gen","","",78],[10,"gen_iter","","",78],[10,"gen_range","","",78],[10,"gen_weighted_bool","","",78],[10,"gen_ascii_chars","","",78],[10,"choose","","",78],[10,"shuffle","","",78],[10,"new","std::rand::reader","Create a new `ReaderRng` from a `Reader`.",79],[10,"next_u32","","",79],[10,"next_u64","","",79],[10,"fill_bytes","","",79],[10,"next_u64","","",79],[10,"next_f32","","",79],[10,"next_f64","","",79],[10,"fill_bytes","","",79],[10,"gen","","",79],[10,"gen_iter","","",79],[10,"gen_range","","",79],[10,"gen_weighted_bool","","",79],[10,"gen_ascii_chars","","",79],[10,"choose","","",79],[10,"shuffle","","",79],[10,"new","std::rand","Create a randomly seeded instance of `StdRng`.",80],[10,"next_u32","","",80],[10,"next_u64","","",80],[10,"next_u64","","",80],[10,"next_f32","","",80],[10,"next_f64","","",80],[10,"fill_bytes","","",80],[10,"gen","","",80],[10,"gen_iter","","",80],[10,"gen_range","","",80],[10,"gen_weighted_bool","","",80],[10,"gen_ascii_chars","","",80],[10,"choose","","",80],[10,"shuffle","","",80],[10,"reseed","","",80],[10,"from_seed","","",80],[10,"reseed","","",81],[10,"next_u32","","",82],[10,"next_u64","","",82],[10,"fill_bytes","","",82],[10,"next_u64","","",82],[10,"next_f32","","",82],[10,"next_f64","","",82],[10,"fill_bytes","","",82],[10,"gen","","",82],[10,"gen_iter","","",82],[10,"gen_range","","",82],[10,"gen_weighted_bool","","",82],[10,"gen_ascii_chars","","",82],[10,"choose","","",82],[10,"shuffle","","",82],[10,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",83],[10,"sample","","",83],[10,"ind_sample","","",83],[10,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",84],[10,"sample","","",84],[10,"sample","","",85],[10,"sample","","",86],[10,"ind_sample","","",84],[10,"ind_sample","","",85],[10,"ind_sample","","",86],[10,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",87],[10,"sample","","",87],[10,"ind_sample","","",87],[10,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",88],[10,"sample","","",88],[10,"ind_sample","","",88],[10,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",89],[10,"sample","","",89],[10,"ind_sample","","",89],[10,"rand","rand::distributions::normal","",90],[10,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",91],[10,"sample","","",91],[10,"ind_sample","","",91],[10,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",92],[10,"sample","","",92],[10,"ind_sample","","",92],[10,"rand","rand::distributions::exponential","",93],[10,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",94],[10,"sample","","",94],[10,"ind_sample","","",94],[10,"sample","rand::distributions","",95],[10,"ind_sample","","",95],[10,"new","","Create a new `WeightedChoice`.",96],[10,"sample","","",96],[10,"ind_sample","","",96],[10,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",97],[10,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",97],[10,"next_u32","","",97],[10,"next_u64","","",97],[10,"fill_bytes","","",97],[10,"next_u64","","",97],[10,"next_f32","","",97],[10,"next_f64","","",97],[10,"fill_bytes","","",97],[10,"gen","","",97],[10,"gen_iter","","",97],[10,"gen_range","","",97],[10,"gen_weighted_bool","","",97],[10,"gen_ascii_chars","","",97],[10,"choose","","",97],[10,"shuffle","","",97],[10,"reseed","","",97],[10,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",97],[10,"reseed","","",98],[10,"default","","",98],[10,"cmp","std::time::duration","",1],[10,"partial_cmp","","",1],[10,"lt","","",1],[10,"le","","",1],[10,"gt","","",1],[10,"ge","","",1],[10,"lt","","",1],[10,"le","","",1],[10,"gt","","",1],[10,"ge","","",1],[10,"assert_receiver_is_total_eq","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"clone_from","","",1],[10,"neg","","",1],[10,"add","","",1],[10,"sub","","",1],[10,"mul","","",1],[10,"div","","",1],[10,"fmt","","",1],[10,"clone","std::collections::hash::map","",99],[10,"clone_from","","",99],[10,"clone","","",100],[10,"clone_from","","",100],[10,"new","","Create an empty HashMap.",100],[10,"with_capacity","","Creates an empty hash map with the given initial capacity.",100],[10,"with_hasher","","Creates an empty hashmap which will use the given hasher to hash keys.",100],[10,"with_capacity_and_hasher","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",100],[10,"capacity","","Returns the number of elements the map can hold without reallocating.",100],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",100],[10,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",100],[10,"contains_key_equiv","","Deprecated: use `contains_key` and `BorrowFrom` instead.",100],[10,"find_equiv","","Deprecated: use `get` and `BorrowFrom` instead.",100],[10,"pop_equiv","","Deprecated: use `remove` and `BorrowFrom` instead.",100],[10,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",100],[10,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",100],[10,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",100],[10,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",100],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",100],[10,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation",100],[10,"len","","Return the number of elements in the map.",100],[10,"is_empty","","Return true if the map contains no elements.",100],[10,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",100],[10,"find","","Deprecated: Renamed to `get`.",100],[10,"get","","Returns a reference to the value corresponding to the key.",100],[10,"contains_key","","Returns true if the map contains a value for the specified key.",100],[10,"find_mut","","Deprecated: Renamed to `get_mut`.",100],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",100],[10,"swap","","Deprecated: Renamed to `insert`.",100],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",100],[10,"pop","","Deprecated: Renamed to `remove`.",100],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",100],[10,"find_copy","","Deprecated: Use `map.get(k).cloned()`.",100],[10,"get_copy","","Deprecated: Use `map[k].clone()`.",100],[10,"eq","","",100],[10,"ne","","",100],[10,"assert_receiver_is_total_eq","","",100],[10,"fmt","","",100],[10,"default","","",100],[10,"index","","",100],[10,"index_mut","","",100],[10,"next","","",101],[10,"size_hint","","",101],[10,"size_hint","","",101],[10,"next","","",102],[10,"size_hint","","",102],[10,"size_hint","","",102],[10,"next","","",103],[10,"size_hint","","",103],[10,"size_hint","","",103],[10,"get","","Gets a reference to the value in the entry",104],[10,"get_mut","","Gets a mutable reference to the value in the entry",104],[10,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",104],[10,"set","","Sets the value of the entry, and returns the entry's old value",104],[10,"take","","Takes the value out of the entry, and returns it",104],[10,"set","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",105],[10,"from_iter","","",100],[10,"extend","","",100],[10,"clone","std::collections::hash::set","",106],[10,"clone_from","","",106],[10,"new","","Create an empty HashSet.",106],[10,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",106],[10,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",106],[10,"with_capacity_and_hasher","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",106],[10,"capacity","","Returns the number of elements the set can hold without reallocating.",106],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",106],[10,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",106],[10,"contains_equiv","","Deprecated: use `contains` and `BorrowFrom`.",106],[10,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",106],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",106],[10,"difference","","Visit the values representing the difference.",106],[10,"symmetric_difference","","Visit the values representing the symmetric difference.",106],[10,"intersection","","Visit the values representing the intersection.",106],[10,"union","","Visit the values representing the union.",106],[10,"len","","Return the number of elements in the set",106],[10,"is_empty","","Returns true if the set contains no elements",106],[10,"clear","","Clears the set, removing all values.",106],[10,"contains","","Returns `true` if the set contains a value.",106],[10,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",106],[10,"is_subset","","Returns `true` if the set is a subset of another.",106],[10,"is_superset","","Returns `true` if the set is a superset of another.",106],[10,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",106],[10,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",106],[10,"eq","","",106],[10,"ne","","",106],[10,"assert_receiver_is_total_eq","","",106],[10,"fmt","","",106],[10,"from_iter","","",106],[10,"extend","","",106],[10,"default","","",106],[10,"eq","std::collections::hash::table","",107],[10,"ne","","",107],[10,"ne","","",107],[10,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",107],[10,"table","","Borrow a reference to the table.",108],[10,"into_table","","Move out the reference to the table.",108],[10,"index","","Get the raw index.",108],[10,"table","","Borrow a reference to the table.",109],[10,"into_table","","Move out the reference to the table.",109],[10,"into_table","","Move out the reference to the table.",110],[10,"index","","Get the raw index.",110],[10,"new","","",110],[10,"at_index","","",110],[10,"first","","",110],[10,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit's initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",110],[10,"next","","Modifies the bucket pointer in place to make it point to the next slot.",110],[10,"next","","",109],[10,"into_bucket","","",109],[10,"gap_peek","","",109],[10,"put","","Puts given key and value pair, along with the key's hash,\ninto this bucket in the hashtable. Note how `self` is 'moved' into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",109],[10,"next","","",108],[10,"into_bucket","","",108],[10,"distance","","Get the distance between this bucket and the 'ideal' location\nas determined by the key's hash stored in it.",108],[10,"hash","","",108],[10,"read","","Gets references to the key and value at a given index.",108],[10,"take","","Removes this bucket's key and value from the hashtable.",108],[10,"replace","","",108],[10,"read_mut","","Gets mutable references to the key and value at a given index.",108],[10,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",108],[10,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",108],[10,"expect_full","","",111],[10,"full","","",112],[10,"shift","","",112],[10,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",113],[10,"capacity","","The hashtable's capacity, similar to a vector's.",113],[10,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",113],[10,"iter","","",113],[10,"iter_mut","","",113],[10,"into_iter","","",113],[10,"next","","",114],[10,"size_hint","","",114],[10,"next","","",115],[10,"size_hint","","",115],[10,"next","","",116],[10,"size_hint","","",116],[10,"size_hint","","",116],[10,"next","","",117],[10,"size_hint","","",117],[10,"size_hint","","",117],[10,"next","","",118],[10,"size_hint","","",118],[10,"size_hint","","",118],[10,"clone","","",113],[10,"clone_from","","",113],[10,"drop","","",113],[10,"hash","std::collections::lru_cache","",119],[10,"eq","","",119],[10,"ne","","",119],[10,"assert_receiver_is_total_eq","","",119],[10,"new","","Create an LRU Cache that holds at most `capacity` items.",120],[10,"put","","Deprecated: Replaced with `insert`.",120],[10,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is\nreturned.",120],[10,"get","","Return a value corresponding to the key in the cache.",120],[10,"pop","","Deprecated: Renamed to `remove`.",120],[10,"remove","","Remove and return a value corresponding to the key from the cache.",120],[10,"capacity","","Return the maximum number of key-value pairs the cache can hold.",120],[10,"change_capacity","","Deprecated: Renamed to `set_capacity`.",120],[10,"set_capacity","","Change the number of key-value pairs the cache can hold. Remove\nleast-recently-used key-value pairs if necessary.",120],[10,"len","","Return the number of key-value pairs in the cache.",120],[10,"is_empty","","Returns whether the cache is currently empty.",120],[10,"clear","","Clear the cache of all key-value pairs.",120],[10,"extend","","",120],[10,"fmt","","Return a string that lists the key-value pairs from most-recently\nused to least-recently used.",120],[10,"drop","","",120],[10,"clone","collections::dlist","",121],[10,"clone_from","","",121],[10,"clone","","",122],[10,"clone_from","","",122],[10,"clone","","",123],[10,"clone_from","","",123],[10,"default","","",124],[10,"new","","Creates an empty `DList`.",124],[10,"rotate_forward","","Moves the last element to the front of the list.",124],[10,"rotate_backward","","Moves the first element to the back of the list.",124],[10,"append","","Adds all elements from `other` to the end of the list.",124],[10,"prepend","","Adds all elements from `other` to the beginning of the list.",124],[10,"insert_when","","Inserts `elt` before the first `x` in the list where `f(x, elt)` is\ntrue, or at the end.",124],[10,"merge","","Merges `other` into this `DList`, using the function `f`.",124],[10,"iter","","Provides a forward iterator.",124],[10,"iter_mut","","Provides a forward iterator with mutable references.",124],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",124],[10,"is_empty","","Returns `true` if the `DList` is empty.",124],[10,"len","","Returns the length of the `DList`.",124],[10,"clear","","Removes all elements from the `DList`.",124],[10,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",124],[10,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",124],[10,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",124],[10,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",124],[10,"push_front","","Adds an element first in the list.",124],[10,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",124],[10,"push","","Deprecated: Renamed to `push_back`.",124],[10,"push_back","","Appends an element to the back of a list",124],[10,"pop","","Deprecated: Renamed to `pop_back`.",124],[10,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",124],[10,"insert_ordered","","Inserts `elt` sorted in ascending order.",124],[10,"drop","","",124],[10,"next","","",121],[10,"size_hint","","",121],[10,"size_hint","","",121],[10,"next_back","","",121],[10,"rposition","","",121],[10,"len","","",121],[10,"next","","",125],[10,"size_hint","","",125],[10,"size_hint","","",125],[10,"next_back","","",125],[10,"rposition","","",125],[10,"len","","",125],[10,"insert_next","","",125],[10,"peek_next","","",125],[10,"next","","",122],[10,"size_hint","","",122],[10,"size_hint","","",122],[10,"next_back","","",122],[10,"from_iter","","",124],[10,"extend","","",124],[10,"eq","","",124],[10,"ne","","",124],[10,"ne","","",124],[10,"assert_receiver_is_total_eq","","",124],[10,"partial_cmp","","",124],[10,"lt","","",124],[10,"le","","",124],[10,"gt","","",124],[10,"ge","","",124],[10,"cmp","","",124],[10,"clone","","",124],[10,"clone_from","","",124],[10,"fmt","","",124],[10,"hash","","",124],[10,"clone","collections::ring_buf","",126],[10,"clone_from","","",126],[10,"drop","","",126],[10,"default","","",126],[10,"new","","Creates an empty `RingBuf`.",126],[10,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",126],[10,"get","","Retrieves an element in the `RingBuf` by index.",126],[10,"get_mut","","Retrieves an element in the `RingBuf` mutably by index.",126],[10,"swap","","Swaps elements at indices `i` and `j`.",126],[10,"capacity","","Returns the number of elements the `RingBuf` can hold without\nreallocating.",126],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `RingBuf`. Does nothing if the capacity is already sufficient.",126],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",126],[10,"iter","","Returns a front-to-back iterator.",126],[10,"iter_mut","","Returns a front-to-back iterator which returns mutable references.",126],[10,"into_iter","","Consumes the list into an iterator yielding elements by value.",126],[10,"len","","Returns the number of elements in the `RingBuf`.",126],[10,"is_empty","","Returns true if the buffer contains no elements",126],[10,"clear","","Clears the buffer, removing all values.",126],[10,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",126],[10,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",126],[10,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",126],[10,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",126],[10,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",126],[10,"push_front","","Inserts an element first in the sequence.",126],[10,"push","","Deprecated: Renamed to `push_back`.",126],[10,"push_back","","Appends an element to the back of a buffer",126],[10,"pop","","Deprecated: Renamed to `pop_back`.",126],[10,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",126],[10,"next","","",127],[10,"size_hint","","",127],[10,"size_hint","","",127],[10,"next_back","","",127],[10,"rposition","","",127],[10,"len","","",127],[10,"indexable","","",127],[10,"idx","","",127],[10,"next","","",128],[10,"size_hint","","",128],[10,"size_hint","","",128],[10,"next_back","","",128],[10,"rposition","","",128],[10,"len","","",128],[10,"next","","",129],[10,"size_hint","","",129],[10,"size_hint","","",129],[10,"next_back","","",129],[10,"rposition","","",129],[10,"len","","",129],[10,"eq","","",126],[10,"ne","","",126],[10,"ne","","",126],[10,"assert_receiver_is_total_eq","","",126],[10,"partial_cmp","","",126],[10,"lt","","",126],[10,"le","","",126],[10,"gt","","",126],[10,"ge","","",126],[10,"cmp","","",126],[10,"hash","","",126],[10,"index","","",126],[10,"index_mut","","",126],[10,"from_iter","","",126],[10,"extend","","",126],[10,"fmt","","",126],[10,"clone","collections::binary_heap","",130],[10,"clone_from","","",130],[10,"default","","",130],[10,"new","","Creates an empty `BinaryHeap` as a max-heap.",130],[10,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",130],[10,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",130],[10,"iter","","An iterator visiting all values in underlying vector, in\narbitrary order.",130],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order.  The binary heap cannot be used\nafter calling this.",130],[10,"top","","Returns the greatest item in a queue, or `None` if it is empty.",130],[10,"capacity","","Returns the number of elements the queue can hold without reallocating.",130],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",130],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",130],[10,"shrink_to_fit","","Discards as much additional capacity as possible.",130],[10,"pop","","Removes the greatest item from a queue and returns it, or `None` if it\nis empty.",130],[10,"push","","Pushes an item onto the queue.",130],[10,"push_pop","","Pushes an item onto a queue then pops the greatest item off the queue in\nan optimized fashion.",130],[10,"replace","","Pops the greatest item off a queue then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the queue\nwas empty.",130],[10,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",130],[10,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",130],[10,"len","","Returns the length of the queue.",130],[10,"is_empty","","Returns true if the queue contains no elements",130],[10,"clear","","Drops all items from the queue.",130],[10,"next","","",131],[10,"size_hint","","",131],[10,"size_hint","","",131],[10,"next_back","","",131],[10,"rposition","","",131],[10,"len","","",131],[10,"next","","",132],[10,"size_hint","","",132],[10,"size_hint","","",132],[10,"next_back","","",132],[10,"rposition","","",132],[10,"len","","",132],[10,"from_iter","","",130],[10,"extend","","",130],[10,"hash","collections::enum_set","",133],[10,"cmp","","",133],[10,"partial_cmp","","",133],[10,"lt","","",133],[10,"le","","",133],[10,"gt","","",133],[10,"ge","","",133],[10,"lt","","",133],[10,"le","","",133],[10,"gt","","",133],[10,"ge","","",133],[10,"assert_receiver_is_total_eq","","",133],[10,"eq","","",133],[10,"ne","","",133],[10,"ne","","",133],[10,"clone","","",133],[10,"clone_from","","",133],[10,"fmt","","",133],[10,"empty","","Deprecated: Renamed to `new`.",133],[10,"new","","Returns an empty `EnumSet`.",133],[10,"len","","Returns the number of elements in the given `EnumSet`.",133],[10,"is_empty","","Returns true if the `EnumSet` is empty.",133],[10,"clear","","",133],[10,"intersects","","Returns `true` if the `EnumSet` contains any enum of the given `EnumSet`.\nDeprecated: Use `is_disjoint`.",133],[10,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",133],[10,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",133],[10,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",133],[10,"union","","Returns the union of both `EnumSets`.",133],[10,"intersection","","Returns the intersection of both `EnumSets`.",133],[10,"add","","Deprecated: Use `insert`.",133],[10,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",133],[10,"remove","","Removes an enum from the EnumSet",133],[10,"contains_elem","","Deprecated: use `contains`.",133],[10,"contains","","Returns `true` if an `EnumSet` contains a given enum.",133],[10,"iter","","Returns an iterator over an `EnumSet`.",133],[10,"sub","","",133],[10,"bitor","","",133],[10,"bitand","","",133],[10,"bitxor","","",133],[10,"next","","",134],[10,"size_hint","","",134],[10,"size_hint","","",134],[10,"from_iter","","",133],[10,"extend","","",133],[10,"assert_receiver_is_total_eq","collections::vec_map","",135],[10,"eq","","",135],[10,"ne","","",135],[10,"ne","","",135],[10,"default","","",135],[10,"clone","","",135],[10,"clone_from","","",135],[10,"clone_from","","",135],[10,"hash","","",135],[10,"new","","Creates an empty `VecMap`.",135],[10,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",135],[10,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",135],[10,"keys","","Returns an iterator visiting all keys in ascending order by the keys.\nThe iterator's element type is `uint`.",135],[10,"values","","Returns an iterator visiting all values in ascending order by the keys.\nThe iterator's element type is `&'r V`.",135],[10,"iter","","Returns an iterator visiting all key-value pairs in ascending order by the keys.\nThe iterator's element type is `(uint, &'r V)`.",135],[10,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order by the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",135],[10,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order by\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(uint, &'r V)`.",135],[10,"len","","Return the number of elements in the map.",135],[10,"is_empty","","Return true if the map contains no elements.",135],[10,"clear","","Clears the map, removing all key-value pairs.",135],[10,"find","","Deprecated: Renamed to `get`.",135],[10,"get","","Returns a reference to the value corresponding to the key.",135],[10,"contains_key","","Returns true if the map contains a value for the specified key.",135],[10,"find_mut","","Deprecated: Renamed to `get_mut`.",135],[10,"get_mut","","Returns a mutable reference to the value corresponding to the key.",135],[10,"swap","","Deprecated: Renamed to `insert`.",135],[10,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",135],[10,"pop","","Deprecated: Renamed to `remove`.",135],[10,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",135],[10,"update","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",135],[10,"update_with_key","","Updates a value in the map. If the key already exists in the map,\nmodifies the value with `ff` taking `key, oldval, newval`.\nOtherwise, sets the value to `newval`.\nReturns `true` if the key did not already exist in the map.",135],[10,"partial_cmp","","",135],[10,"lt","","",135],[10,"le","","",135],[10,"gt","","",135],[10,"ge","","",135],[10,"cmp","","",135],[10,"fmt","","",135],[10,"from_iter","","",135],[10,"extend","","",135],[10,"index","","",135],[10,"index_mut","","",135],[10,"next","","",136],[10,"size_hint","","",136],[10,"size_hint","","",136],[10,"next_back","","",136],[10,"next","","",137],[10,"size_hint","","",137],[10,"size_hint","","",137],[10,"next_back","","",137],[10,"clone","std::hash","",138],[10,"clone_from","","",138],[10,"new","","Construct a new `RandomSipHasher` that is initialized with random keys.",138],[10,"hash","","",138],[10,"default","","",138],[10,"new","collections::hash::sip","Creates a `SipState` that is keyed off the provided keys.",139],[10,"new_with_keys","","Creates a `SipState` that is keyed off the provided keys.",139],[10,"reset","","Resets the state to its initial state.",139],[10,"result","","Returns the computed hash.",139],[10,"write","","",139],[10,"clone","","",139],[10,"clone_from","","",139],[10,"default","","",139],[10,"clone","","",140],[10,"clone_from","","",140],[10,"new","","Creates a `Sip`.",140],[10,"new_with_keys","","Creates a `Sip` that is keyed off the provided keys.",140],[10,"hash","","",140],[10,"default","","",140],[10,"new","std::task","Generate the base configuration for spawning a task, off of which more\nconfiguration methods can be chained.",141],[10,"named","","Name the task-to-be. Currently the name is used for identification\nonly in panic messages.",141],[10,"stack_size","","Set the size of the stack for the new task.",141],[10,"stdout","","Redirect task-local stdout.",141],[10,"stderr","","Redirect task-local stderr.",141],[10,"spawn","","Creates and executes a new child task.",141],[10,"try_future","","Execute a proc in a newly-spawned task and return a future representing\nthe task's result. The task has the properties and behavior\nspecified by the `TaskBuilder`.",141],[10,"try","","Execute a function in a newly-spawnedtask and block until the task\ncompletes or panics. Equivalent to `.try_future(f).unwrap()`.",141],[10,"new","std::sync::atomic","Create a new `AtomicOption`",142],[10,"empty","","Create a new `AtomicOption` that doesn't contain a value",142],[10,"swap","","Store a value, returning the old value",142],[10,"take","","Remove the value, leaving the `AtomicOption` empty.",142],[10,"fill","","Replace an empty value with a non-empty value.",142],[10,"is_empty","","Returns `true` if the `AtomicOption` is empty.",142],[10,"drop","","",142],[10,"new","std::sync::barrier","Create a new barrier that can block a given number of threads.",143],[10,"wait","","Block the current thread until all threads has rendezvoused here.",143],[10,"new","std::sync::condvar","Creates a new condition variable which is ready to be waited on and\nnotified.",144],[10,"wait","","Block the current thread until this condition variable receives a\nnotification.",144],[10,"notify_one","","Wake up one blocked thread on this condvar.",144],[10,"notify_all","","Wake up all blocked threads on this condvar.",144],[10,"drop","","",144],[10,"wait","","Block the current thread until this condition variable receives a\nnotification.",145],[10,"notify_one","","Wake up one blocked thread on this condvar.",145],[10,"notify_all","","Wake up all blocked threads on this condvar.",145],[10,"destroy","","Deallocate all resources associated with this static condvar.",145],[10,"get","std::sync::future","Get the value of the future.",146],[10,"into_inner","","Gets the value from this future, forcing evaluation.",146],[10,"unwrap","","Deprecated, use into_inner() instead",146],[10,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",146],[10,"from_value","","Create a future from a value.",146],[10,"from_fn","","Create a future from a function.",146],[10,"from_receiver","","Create a future from a port",146],[10,"spawn","","Create a future from a unique closure.",146],[10,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",147],[10,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",147],[10,"try_lock","","Attempts to acquire this lock.",147],[10,"drop","","",147],[10,"lock","","Acquires this lock, see `Mutex::lock`",148],[10,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",148],[10,"destroy","","Deallocates resources associated with this static mutex.",148],[10,"as_mutex_guard","","",149],[10,"deref","","",149],[10,"deref_mut","","",149],[10,"as_mutex_guard","","",150],[10,"drop","","",150],[10,"doit","std::sync::once","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `doit` has been called, and\notherwise the routine will *not* be invoked.",151],[10,"borrow","std::sync::poison","",152],[10,"check","","",153],[10,"done","","",153],[10,"new","std::sync::rwlock","Creates a new instance of an RWLock which is unlocked and read to go.",154],[10,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",154],[10,"try_read","","Attempt to acquire this lock with shared read access.",154],[10,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",154],[10,"try_write","","Attempt to lock this rwlock with exclusive write access.",154],[10,"drop","","",154],[10,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",155],[10,"try_read","","Attempt to acquire this lock with shared read access.",155],[10,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",155],[10,"try_write","","Attempt to lock this rwlock with exclusive write access.",155],[10,"destroy","","Deallocate all resources associated with this static lock.",155],[10,"deref","","",156],[10,"deref","","",157],[10,"deref_mut","","",157],[10,"drop","","",158],[10,"drop","","",159],[10,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",160],[10,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",160],[10,"release","","Release a resource from this semaphore.",160],[10,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",160],[10,"drop","","",161],[10,"drop","std::sync::task_pool","",162],[10,"new","","Spawns a new task pool with `tasks` tasks.",163],[10,"execute","","Executes the function `job` on a task in the pool.",163],[10,"new","std::comm::oneshot","",164],[10,"send","","",164],[10,"sent","","",164],[10,"recv","","",164],[10,"try_recv","","",164],[10,"upgrade","","",164],[10,"drop_chan","","",164],[10,"drop_port","","",164],[10,"can_recv","","",164],[10,"start_selection","","",164],[10,"abort_selection","","",164],[10,"drop","","",164],[10,"new","std::comm::select","Creates a new selection structure. This set is initially empty and\n`wait` will panic!() if called.",165],[10,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",165],[10,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",165],[10,"id","","Retrieve the id of this handle.",166],[10,"recv","","Receive a value on the underlying receiver. Has the same semantics as\n`Receiver.recv`",166],[10,"recv_opt","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv_opt`",166],[10,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",166],[10,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",166],[10,"drop","","",165],[10,"drop","","",166],[10,"next","","",167],[10,"size_hint","","",167],[10,"new","std::comm::shared","",168],[10,"postinit_lock","","",168],[10,"inherit_blocker","","",168],[10,"send","","",168],[10,"recv","","",168],[10,"try_recv","","",168],[10,"clone_chan","","",168],[10,"drop_chan","","",168],[10,"drop_port","","",168],[10,"can_recv","","",168],[10,"start_selection","","",168],[10,"abort_selection","","",168],[10,"drop","","",168],[10,"new","std::comm::stream","",169],[10,"send","","",169],[10,"upgrade","","",169],[10,"recv","","",169],[10,"try_recv","","",169],[10,"drop_chan","","",169],[10,"drop_port","","",169],[10,"can_recv","","",169],[10,"start_selection","","",169],[10,"abort_selection","","",169],[10,"drop","","",169],[10,"fmt","std::comm::sync","",170],[10,"new","","",171],[10,"send","","",171],[10,"try_send","","",171],[10,"recv","","",171],[10,"try_recv","","",171],[10,"clone_chan","","",171],[10,"drop_chan","","",171],[10,"drop_port","","",171],[10,"can_recv","","",171],[10,"start_selection","","",171],[10,"abort_selection","","",171],[10,"drop","","",171],[10,"new","std::comm::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",172],[10,"push","","Pushes a new value onto this queue.",172],[10,"pop","","Pops some data from this queue.",172],[10,"drop","","",172],[10,"new","std::comm::spsc_queue","Creates a new queue.",173],[10,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",173],[10,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",173],[10,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",173],[10,"drop","","",173],[10,"fmt","std::comm","",174],[10,"clone","","",174],[10,"clone_from","","",174],[10,"eq","","",174],[10,"ne","","",174],[10,"ne","","",174],[10,"fmt","","",175],[10,"clone","","",175],[10,"clone_from","","",175],[10,"eq","","",175],[10,"ne","","",175],[10,"ne","","",175],[10,"send","","Sends a value along this channel to be received by the corresponding\nreceiver.",176],[10,"send_opt","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",176],[10,"clone","","",176],[10,"clone_from","","",176],[10,"drop","","",176],[10,"send","","Sends a value on this synchronous channel.",177],[10,"send_opt","","Send a value on a channel, returning it back if the receiver\ndisconnected",177],[10,"try_send","","Attempts to send a value on this channel without blocking.",177],[10,"clone","","",177],[10,"clone_from","","",177],[10,"drop","","",177],[10,"recv","","Blocks waiting for a value on this receiver",178],[10,"try_recv","","Attempts to return a pending value on this receiver without blocking",178],[10,"recv_opt","","Attempt to wait for a value on this receiver, but does not panic if the\ncorresponding channel has hung up.",178],[10,"iter","","Returns an iterator which will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",178],[10,"next","","",179],[10,"size_hint","","",179],[10,"drop","","",178],[10,"new","std::sys::condvar","",180],[10,"notify_one","","",180],[10,"notify_all","","",180],[10,"wait","","",180],[10,"wait_timeout","","",180],[10,"destroy","","",180],[10,"new","std::sys::fs","",181],[10,"read","","",181],[10,"write","","",181],[10,"fd","","",181],[10,"seek","","",181],[10,"tell","","",181],[10,"fsync","","",181],[10,"datasync","","",181],[10,"truncate","","",181],[10,"fstat","","",181],[10,"unwrap","","Extract the actual filedescriptor without closing it.",181],[10,"drop","","",181],[10,"new","std::sys::mutex","",182],[10,"lock","","",182],[10,"unlock","","",182],[10,"try_lock","","",182],[10,"destroy","","",182],[10,"drop","std::sys::pipe","",183],[10,"connect","","",184],[10,"fd","","",184],[10,"read","","",184],[10,"write","","",184],[10,"close_write","","",184],[10,"close_read","","",184],[10,"set_timeout","","",184],[10,"set_read_timeout","","",184],[10,"set_write_timeout","","",184],[10,"clone","","",184],[10,"clone_from","","",184],[10,"bind","","",185],[10,"fd","","",185],[10,"listen","","",185],[10,"fd","","",186],[10,"accept","","",186],[10,"set_timeout","","",186],[10,"close_accept","","",186],[10,"clone","","",186],[10,"clone_from","","",186],[10,"drop","","",185],[10,"id","std::sys::process","",187],[10,"kill","","",187],[10,"killpid","","",187],[10,"spawn","","",187],[10,"wait","","",187],[10,"try_wait","","",187],[10,"new","std::sys::rwlock","",188],[10,"read","","",188],[10,"try_read","","",188],[10,"write","","",188],[10,"try_write","","",188],[10,"read_unlock","","",188],[10,"write_unlock","","",188],[10,"destroy","","",188],[10,"bind","std::sys::tcp","",189],[10,"fd","","",189],[10,"listen","","",189],[10,"socket_name","","",189],[10,"fd","","",190],[10,"accept","","",190],[10,"socket_name","","",190],[10,"set_timeout","","",190],[10,"close_accept","","",190],[10,"clone","","",190],[10,"clone_from","","",190],[10,"new","std::sys::timer","",191],[10,"sleep","","",191],[10,"oneshot","","",191],[10,"period","","",191],[10,"drop","","",191],[10,"new","std::sys::tty","",192],[10,"read","","",192],[10,"write","","",192],[10,"set_raw","","",192],[10,"get_winsize","","",192],[10,"isatty","","",192],[10,"new","std::sys_common::condvar","Creates a new condition variable for use.",193],[10,"notify_one","","Signal one waiter on this condition variable to wake up.",193],[10,"notify_all","","Awaken all current waiters on this condition variable.",193],[10,"wait","","Wait for a signal on the specified mutex.",193],[10,"wait_timeout","","Wait for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",193],[10,"destroy","","Deallocate all resources associated with this condition variable.",193],[10,"boot","std::sys_common::helper_thread","Lazily boots a helper thread, becoming a no-op if the helper has already\nbeen spawned.",194],[10,"send","","Sends a message to a spawned worker thread.",194],[10,"new","std::sys_common::mutex","Creates a newly initialized mutex.",195],[10,"lock","","Lock the mutex blocking the current thread until it is available.",195],[10,"try_lock","","Attempt to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",195],[10,"unlock","","Unlock the mutex.",195],[10,"destroy","","Deallocate all resources associated with this mutex.",195],[10,"fmt","std::sys_common::net","",196],[10,"drop","","",197],[10,"drop","","",198],[10,"connect","","",199],[10,"new","","",199],[10,"fd","","",199],[10,"set_nodelay","","",199],[10,"set_keepalive","","",199],[10,"read","","",199],[10,"write","","",199],[10,"peer_name","","",199],[10,"close_write","","",199],[10,"close_read","","",199],[10,"set_timeout","","",199],[10,"set_read_timeout","","",199],[10,"set_write_timeout","","",199],[10,"socket_name","","",199],[10,"clone","","",199],[10,"clone_from","","",199],[10,"bind","","",200],[10,"fd","","",200],[10,"set_broadcast","","",200],[10,"set_multicast_loop","","",200],[10,"set_membership","","",200],[10,"socket_name","","",200],[10,"recv_from","","",200],[10,"send_to","","",200],[10,"join_multicast","","",200],[10,"leave_multicast","","",200],[10,"multicast_time_to_live","","",200],[10,"time_to_live","","",200],[10,"set_timeout","","",200],[10,"set_read_timeout","","",200],[10,"set_write_timeout","","",200],[10,"clone","","",200],[10,"clone_from","","",200],[10,"new","std::sys_common::rwlock","Creates a new instance of an RWLock.",201],[10,"read","","Acquire shared access to the underlying lock, blocking the current\nthread to do so.",201],[10,"try_read","","Attempt to acquire shared access to this lock, returning whether it\nsucceeded or not.",201],[10,"write","","Acquire write access to the underlying lock, blocking the current thread\nto do so.",201],[10,"try_write","","Attempt to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",201],[10,"read_unlock","","Unlock previously acquired shared access to this lock.",201],[10,"write_unlock","","Unlock previously acquired exclusive access to this lock.",201],[10,"destroy","","Destroy OS-related resources with this RWLock.",201],[10,"get","std::sys_common::thread_local","Gets the value associated with this TLS key",202],[10,"set","","Sets this TLS key to a new value.",202],[10,"destroy","","Deallocates this OS TLS key.",202],[10,"new","","Create a new managed OS TLS key.",203],[10,"get","","See StaticKey::get",203],[10,"set","","See StaticKey::set",203],[10,"drop","","",203],[10,"write","rustrt::util","",204],[10,"flush","","",204],[10,"write_fmt","","",204],[10,"write_str","","",204],[10,"write_line","","",204],[10,"write_char","","",204],[10,"write_int","","",204],[10,"write_uint","","",204],[10,"write_le_uint","","",204],[10,"write_le_int","","",204],[10,"write_be_uint","","",204],[10,"write_be_int","","",204],[10,"write_be_u64","","",204],[10,"write_be_u32","","",204],[10,"write_be_u16","","",204],[10,"write_be_i64","","",204],[10,"write_be_i32","","",204],[10,"write_be_i16","","",204],[10,"write_be_f64","","",204],[10,"write_be_f32","","",204],[10,"write_le_u64","","",204],[10,"write_le_u32","","",204],[10,"write_le_u16","","",204],[10,"write_le_i64","","",204],[10,"write_le_i32","","",204],[10,"write_le_i16","","",204],[10,"write_le_f64","","",204],[10,"write_le_f32","","",204],[10,"write_u8","","",204],[10,"write_i8","","",204],[10,"clone","rustrt::c_str","Clone this CString into a new, uniquely owned CString. For safety\nreasons, this is always a deep clone with the memory allocated\nwith C's allocator API, rather than the usual shallow clone.",76],[10,"clone_from","","",76],[10,"eq","","",76],[10,"ne","","",76],[10,"partial_cmp","","",76],[10,"lt","","",76],[10,"le","","",76],[10,"gt","","",76],[10,"ge","","",76],[10,"assert_receiver_is_total_eq","","",76],[10,"hash","","",76],[10,"new","","Create a C String from a pointer, with memory managed by C's allocator\n API, so avoid calling it with a pointer to memory managed by Rust's\n allocator API, as the behaviour would not be well defined.",76],[10,"as_ptr","","Return a pointer to the NUL-terminated string data.",76],[10,"as_mut_ptr","","Return a mutable pointer to the NUL-terminated string data.",76],[10,"owns_buffer","","Returns whether or not the `CString` owns the buffer.",76],[10,"as_bytes","","Converts the CString into a `&[u8]` without copying.\nIncludes the terminating NUL byte.",76],[10,"as_bytes_no_nul","","Converts the CString into a `&[u8]` without copying.\nDoes not include the terminating NUL byte.",76],[10,"as_str","","Converts the CString into a `&str` without copying.\nReturns None if the CString is not UTF-8.",76],[10,"iter","","Return a CString iterator.",76],[10,"into_inner","","Unwraps the wrapped `*libc::c_char` from the `CString` wrapper.",76],[10,"unwrap","","Deprecated, use into_inner() instead",76],[10,"len","","Return the number of bytes in the CString (not including the NUL\nterminator).",76],[10,"is_empty","","Returns if there are no bytes in this string",76],[10,"drop","","",76],[10,"fmt","","",76],[10,"to_c_str","collections::string","",3],[10,"to_c_str_unchecked","","",3],[10,"with_c_str","","",3],[10,"with_c_str_unchecked","","",3],[10,"with_c_str","","",3],[10,"with_c_str_unchecked","","",3],[10,"next","rustrt::c_str","",205],[10,"size_hint","","",205],[10,"new","collections::slice","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",206],[10,"next","","",206],[10,"size_hint","","",206],[10,"size_hint","","",206],[10,"next","","",207],[10,"size_hint","","",207],[10,"size_hint","","",207],[10,"into_vec","alloc::boxed","",60],[10,"from_iter","core::borrow","",208],[10,"into_cow","collections::vec","",4],[10,"new","","Constructs a new, empty `Vec`.",4],[10,"with_capacity","","Constructs a new, empty `Vec` with the specified capacity.",4],[10,"from_fn","","Creates and initializes a `Vec`.",4],[10,"from_raw_parts","","Creates a `Vec<T>` directly from the raw constituents.",4],[10,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",4],[10,"partition","","Consumes the `Vec`, partitioning it based on a predicate.",4],[10,"from_elem","","Constructs a `Vec` with copies of a value.",4],[10,"push_all","","Appends all elements in a slice to the `Vec`.",4],[10,"grow","","Grows the `Vec` in-place.",4],[10,"partitioned","","Partitions a vector based on a predicate.",4],[10,"clone","","",4],[10,"clone_from","","",4],[10,"clone_from","","",4],[10,"index","","",4],[10,"index_mut","","",4],[10,"as_slice_","","",4],[10,"slice_from_or_fail","","",4],[10,"slice_to_or_fail","","",4],[10,"slice_or_fail","","",4],[10,"as_mut_slice_","","",4],[10,"slice_from_or_fail_mut","","",4],[10,"slice_to_or_fail_mut","","",4],[10,"slice_or_fail_mut","","",4],[10,"deref","","",4],[10,"deref_mut","","",4],[10,"from_iter","","",4],[10,"extend","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"eq","core::borrow","",208],[10,"ne","","",208],[10,"ne","","",208],[10,"eq","collections::vec","",4],[10,"ne","","",4],[10,"ne","","",4],[10,"eq","core::borrow","",208],[10,"ne","","",208],[10,"ne","","",208],[10,"eq","","",208],[10,"ne","","",208],[10,"ne","","",208],[10,"partial_cmp","collections::vec","",4],[10,"lt","","",4],[10,"le","","",4],[10,"gt","","",4],[10,"ge","","",4],[10,"assert_receiver_is_total_eq","","",4],[10,"equiv","","",4],[10,"cmp","","",4],[10,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",4],[10,"reserve_additional","","Deprecated: Renamed to `reserve`.",4],[10,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec`. The collection may reserve more space to avoid frequent reallocations.",4],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `Vec`. Does nothing if the capacity is already sufficient.",4],[10,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible. It will drop\ndown as close as possible to the length but the allocator may still\ninform the vector that there is space for a few more elements.",4],[10,"into_boxed_slice","","Convert the vector into Box<[T]>.",4],[10,"truncate","","Shorten a vector, dropping excess elements.",4],[10,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",4],[10,"into_iter","","Creates a consuming iterator, that is, one that moves each\nvalue out of the vector (from start to end). The vector cannot\nbe used after calling this.",4],[10,"set_len","","Sets the length of a vector.",4],[10,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element. This does not preserve ordering, but is O(1).",4],[10,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",4],[10,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.\nReturns `None` if `i` is out of bounds.",4],[10,"retain","","Retains only the elements specified by the predicate.",4],[10,"grow_fn","","Expands a vector in place, initializing the new elements to the result of a function.",4],[10,"push","","Appends an element to the back of a collection.",4],[10,"pop","","Removes the last element from a vector and returns it, or `None` if\nit is empty.",4],[10,"clear","","Clears the vector, removing all values.",4],[10,"len","","Return the number of elements in the vector",4],[10,"is_empty","","Returns true if the vector contains no elements",4],[10,"dedup","","Removes consecutive repeated elements in the vector.",4],[10,"as_slice","","Returns a slice into `self`.",4],[10,"add","","",4],[10,"drop","","",4],[10,"default","","",4],[10,"fmt","","",4],[10,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",209],[10,"unwrap","","Deprecated, use into_inner() instead",209],[10,"next","","",209],[10,"size_hint","","",209],[10,"size_hint","","",209],[10,"next_back","","",209],[10,"rposition","","",209],[10,"len","","",209],[10,"drop","","",209],[10,"deref","","",210],[10,"drop","","",210],[10,"drop","","",211],[10,"drop","","",212],[10,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",4],[10,"write","","",4],[10,"write_fmt","","",4],[10,"rposition","core::iter","",213],[10,"len","","",213],[10,"rposition","","",214],[10,"len","","",214],[10,"rposition","","",215],[10,"len","","",215],[10,"rposition","","",216],[10,"len","","",216],[10,"rposition","","",217],[10,"len","","",217],[10,"clone","","",215],[10,"clone_from","","",215],[10,"next","","",215],[10,"size_hint","","",215],[10,"size_hint","","",215],[10,"next_back","","",215],[10,"indexable","","",215],[10,"idx","","",215],[10,"next","","",218],[10,"size_hint","","",218],[10,"size_hint","","",218],[10,"next_back","","",218],[10,"fmt","","",219],[10,"eq","","",219],[10,"ne","","",219],[10,"ne","","",219],[10,"clone","","",219],[10,"clone_from","","",219],[10,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",219],[10,"next","","",220],[10,"size_hint","","",220],[10,"size_hint","","",220],[10,"next_back","","",220],[10,"rposition","","",220],[10,"len","","",220],[10,"clone","","",221],[10,"clone_from","","",221],[10,"next","","",221],[10,"size_hint","","",221],[10,"size_hint","","",221],[10,"indexable","","",221],[10,"idx","","",221],[10,"clone","","",222],[10,"clone_from","","",222],[10,"next","","",222],[10,"size_hint","","",222],[10,"size_hint","","",222],[10,"next_back","","",222],[10,"indexable","","",222],[10,"idx","","",222],[10,"clone","","",217],[10,"clone_from","","",217],[10,"next","","",217],[10,"size_hint","","",217],[10,"size_hint","","",217],[10,"next_back","","",217],[10,"indexable","","",217],[10,"idx","","",217],[10,"next","","",216],[10,"size_hint","","",216],[10,"size_hint","","",216],[10,"next_back","","",216],[10,"indexable","","",216],[10,"idx","","",216],[10,"next","","",223],[10,"size_hint","","",223],[10,"size_hint","","",223],[10,"next_back","","",223],[10,"next","","",224],[10,"size_hint","","",224],[10,"size_hint","","",224],[10,"next_back","","",224],[10,"clone","","",213],[10,"clone_from","","",213],[10,"next","","",213],[10,"size_hint","","",213],[10,"size_hint","","",213],[10,"next_back","","",213],[10,"indexable","","",213],[10,"idx","","",213],[10,"next","","",225],[10,"size_hint","","",225],[10,"size_hint","","",225],[10,"peek","","Return a reference to the next element of the iterator with out advancing it,\nor None if the iterator is exhausted.",225],[10,"is_empty","","Check whether peekable iterator is empty or not.",225],[10,"next","","",226],[10,"size_hint","","",226],[10,"size_hint","","",226],[10,"next","","",227],[10,"size_hint","","",227],[10,"size_hint","","",227],[10,"clone","","",228],[10,"clone_from","","",228],[10,"next","","",228],[10,"size_hint","","",228],[10,"size_hint","","",228],[10,"indexable","","",228],[10,"idx","","",228],[10,"clone","","",229],[10,"clone_from","","",229],[10,"next","","",229],[10,"size_hint","","",229],[10,"size_hint","","",229],[10,"indexable","","",229],[10,"idx","","",229],[10,"next","","",230],[10,"size_hint","","",230],[10,"size_hint","","",230],[10,"next","","",231],[10,"size_hint","","",231],[10,"size_hint","","",231],[10,"next_back","","",231],[10,"clone","","",232],[10,"clone_from","","",232],[10,"next","","",232],[10,"size_hint","","",232],[10,"size_hint","","",232],[10,"next_back","","",232],[10,"indexable","","",232],[10,"idx","","",232],[10,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",232],[10,"next","","",214],[10,"size_hint","","",214],[10,"size_hint","","",214],[10,"next_back","","",214],[10,"indexable","","",214],[10,"idx","","",214],[10,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",233],[10,"next","","",233],[10,"size_hint","","",233],[10,"size_hint","","",233],[10,"clone","","",234],[10,"clone_from","","",234],[10,"next","","",234],[10,"size_hint","","",234],[10,"size_hint","","",234],[10,"clone","","",235],[10,"clone_from","","",235],[10,"next","","",235],[10,"size_hint","","",235],[10,"size_hint","","",235],[10,"next_back","","",235],[10,"clone","","",236],[10,"clone_from","","",236],[10,"next","","",236],[10,"size_hint","","",236],[10,"size_hint","","",236],[10,"next_back","","",236],[10,"clone","","",237],[10,"clone_from","","",237],[10,"next","","",237],[10,"size_hint","","",237],[10,"clone","","",238],[10,"clone_from","","",238],[10,"next","","",238],[10,"size_hint","","",238],[10,"clone","","",239],[10,"clone_from","","",239],[10,"new","","Create a new `Repeat` that endlessly repeats the element `elt`.",239],[10,"next","","",239],[10,"size_hint","","",239],[10,"size_hint","","",239],[10,"next_back","","",239],[10,"indexable","","",239],[10,"idx","","",239],[10,"new","core::cell","Creates a new `Cell` containing the given value.",240],[10,"get","","Returns a copy of the contained value.",240],[10,"set","","Sets the contained value.",240],[10,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",240],[10,"clone","","",240],[10,"clone_from","","",240],[10,"default","","",240],[10,"eq","","",240],[10,"ne","","",240],[10,"new","","Create a new `RefCell` containing `value`",241],[10,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",241],[10,"unwrap","","Deprecated, use into_inner() instead",241],[10,"try_borrow","","Attempts to immutably borrow the wrapped value.",241],[10,"borrow","","Immutably borrows the wrapped value.",241],[10,"try_borrow_mut","","Mutably borrows the wrapped value.",241],[10,"borrow_mut","","Mutably borrows the wrapped value.",241],[10,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",241],[10,"clone","","",241],[10,"clone_from","","",241],[10,"default","","",241],[10,"eq","","",241],[10,"ne","","",241],[10,"drop","","",242],[10,"clone","","",242],[10,"clone_from","","",242],[10,"deref","","",243],[10,"drop","","",244],[10,"deref","","",245],[10,"deref_mut","","",245],[10,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",246],[10,"get","","Gets a mutable pointer to the wrapped value.",246],[10,"into_inner","","Unwraps the value",246],[10,"unwrap","","Deprecated, use into_inner() instead",246],[10,"default","alloc::boxed","",60],[10,"default","","",60],[10,"clone","","Returns a copy of the owned box.",60],[10,"clone_from","","Performs copy-assignment from `source` by reusing the existing allocation.",60],[10,"clone_from","","",60],[10,"eq","","",60],[10,"ne","","",60],[10,"ne","","",60],[10,"partial_cmp","","",60],[10,"lt","","",60],[10,"le","","",60],[10,"ge","","",60],[10,"gt","","",60],[10,"lt","","",60],[10,"le","","",60],[10,"gt","","",60],[10,"ge","","",60],[10,"cmp","","",60],[10,"assert_receiver_is_total_eq","","",60],[10,"downcast","","",60],[10,"fmt","","",60],[10,"fmt","","",60],[10,"fmt","core::result","",22],[10,"cmp","","",22],[10,"assert_receiver_is_total_eq","","",22],[10,"partial_cmp","","",22],[10,"lt","","",22],[10,"le","","",22],[10,"gt","","",22],[10,"ge","","",22],[10,"lt","","",22],[10,"le","","",22],[10,"gt","","",22],[10,"ge","","",22],[10,"eq","","",22],[10,"ne","","",22],[10,"ne","","",22],[10,"clone","","",22],[10,"clone_from","","",22],[10,"is_ok","","Returns true if the result is `Ok`",22],[10,"is_err","","Returns true if the result is `Err`",22],[10,"ok","","Convert from `Result<T, E>` to `Option<T>`",22],[10,"err","","Convert from `Result<T, E>` to `Option<E>`",22],[10,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",22],[10,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",22],[10,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",22],[10,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",22],[10,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",22],[10,"iter","","Returns an iterator over the possibly contained value.",22],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",22],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",22],[10,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",22],[10,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",22],[10,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",22],[10,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",22],[10,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",22],[10,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",22],[10,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",22],[10,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",22],[10,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",22],[10,"clone","","",247],[10,"clone_from","","",247],[10,"next","","",247],[10,"size_hint","","",247],[10,"size_hint","","",247],[10,"next_back","","",247],[10,"rposition","","",247],[10,"len","","",247],[10,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",22],[10,"fmt","core::simd","",248],[10,"fmt","","",249],[10,"fmt","","",250],[10,"fmt","","",251],[10,"fmt","","",252],[10,"fmt","","",253],[10,"fmt","","",254],[10,"fmt","","",255],[10,"fmt","","",256],[10,"fmt","","",257],[10,"new","alloc::rc","Constructs a new `Rc<T>`.",258],[10,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",258],[10,"make_unique","","Make a mutable reference from the given `Rc<T>`.",258],[10,"deref","","",258],[10,"drop","","Drops the `Rc<T>`.",258],[10,"clone","","Makes a clone of the `Rc<T>`.",258],[10,"clone_from","","",258],[10,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",258],[10,"eq","","Equality for two `Rc<T>`s.",258],[10,"ne","","Inequality for two `Rc<T>`s.",258],[10,"ne","","",258],[10,"assert_receiver_is_total_eq","","",258],[10,"partial_cmp","","Partial comparison for two `Rc<T>`s.",258],[10,"lt","","Less-than comparison for two `Rc<T>`s.",258],[10,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",258],[10,"gt","","Greater-than comparison for two `Rc<T>`s.",258],[10,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",258],[10,"lt","","",258],[10,"le","","",258],[10,"gt","","",258],[10,"ge","","",258],[10,"cmp","","Comparison for two `Rc<T>`s.",258],[10,"fmt","","",258],[10,"upgrade","","Upgrades a weak reference to a strong reference.",259],[10,"drop","","Drops the `Weak<T>`.",259],[10,"clone","","Makes a clone of the `Weak<T>`.",259],[10,"clone_from","","",259],[10,"into_cow","core::borrow","",208],[10,"clone","","",208],[10,"clone_from","","",208],[10,"to_mut","","Acquire a mutable reference to the owned form of the data.",208],[10,"into_owned","","Extract the owned data.",208],[10,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",208],[10,"is_owned","","Returns true if this `Cow` wraps an owned value",208],[10,"deref","","",208],[10,"assert_receiver_is_total_eq","","",208],[10,"cmp","","",208],[10,"eq","","",208],[10,"ne","","",208],[10,"partial_cmp","","",208],[10,"lt","","",208],[10,"le","","",208],[10,"gt","","",208],[10,"ge","","",208],[10,"fmt","","",208],[10,"cmp","core::kinds::marker","",260],[10,"partial_cmp","","",260],[10,"lt","","",260],[10,"le","","",260],[10,"gt","","",260],[10,"ge","","",260],[10,"lt","","",260],[10,"le","","",260],[10,"gt","","",260],[10,"ge","","",260],[10,"assert_receiver_is_total_eq","","",260],[10,"eq","","",260],[10,"ne","","",260],[10,"ne","","",260],[10,"clone","","",260],[10,"clone_from","","",260],[10,"cmp","","",261],[10,"partial_cmp","","",261],[10,"lt","","",261],[10,"le","","",261],[10,"gt","","",261],[10,"ge","","",261],[10,"lt","","",261],[10,"le","","",261],[10,"gt","","",261],[10,"ge","","",261],[10,"assert_receiver_is_total_eq","","",261],[10,"eq","","",261],[10,"ne","","",261],[10,"ne","","",261],[10,"clone","","",261],[10,"clone_from","","",261],[10,"cmp","","",262],[10,"partial_cmp","","",262],[10,"lt","","",262],[10,"le","","",262],[10,"gt","","",262],[10,"ge","","",262],[10,"lt","","",262],[10,"le","","",262],[10,"gt","","",262],[10,"ge","","",262],[10,"assert_receiver_is_total_eq","","",262],[10,"eq","","",262],[10,"ne","","",262],[10,"ne","","",262],[10,"clone","","",262],[10,"clone_from","","",262],[10,"cmp","","",263],[10,"partial_cmp","","",263],[10,"lt","","",263],[10,"le","","",263],[10,"gt","","",263],[10,"ge","","",263],[10,"lt","","",263],[10,"le","","",263],[10,"gt","","",263],[10,"ge","","",263],[10,"assert_receiver_is_total_eq","","",263],[10,"eq","","",263],[10,"ne","","",263],[10,"ne","","",263],[10,"clone","","",263],[10,"clone_from","","",263],[10,"cmp","","",264],[10,"partial_cmp","","",264],[10,"lt","","",264],[10,"le","","",264],[10,"gt","","",264],[10,"ge","","",264],[10,"lt","","",264],[10,"le","","",264],[10,"gt","","",264],[10,"ge","","",264],[10,"assert_receiver_is_total_eq","","",264],[10,"eq","","",264],[10,"ne","","",264],[10,"ne","","",264],[10,"clone","","",264],[10,"clone_from","","",264],[10,"cmp","","",265],[10,"partial_cmp","","",265],[10,"lt","","",265],[10,"le","","",265],[10,"gt","","",265],[10,"ge","","",265],[10,"lt","","",265],[10,"le","","",265],[10,"gt","","",265],[10,"ge","","",265],[10,"assert_receiver_is_total_eq","","",265],[10,"eq","","",265],[10,"ne","","",265],[10,"ne","","",265],[10,"clone","","",265],[10,"clone_from","","",265],[10,"cmp","","",266],[10,"partial_cmp","","",266],[10,"lt","","",266],[10,"le","","",266],[10,"gt","","",266],[10,"ge","","",266],[10,"lt","","",266],[10,"le","","",266],[10,"gt","","",266],[10,"ge","","",266],[10,"assert_receiver_is_total_eq","","",266],[10,"eq","","",266],[10,"ne","","",266],[10,"ne","","",266],[10,"clone","","",266],[10,"clone_from","","",266],[10,"cmp","","",267],[10,"partial_cmp","","",267],[10,"lt","","",267],[10,"le","","",267],[10,"gt","","",267],[10,"ge","","",267],[10,"lt","","",267],[10,"le","","",267],[10,"gt","","",267],[10,"ge","","",267],[10,"assert_receiver_is_total_eq","","",267],[10,"eq","","",267],[10,"ne","","",267],[10,"ne","","",267],[10,"clone","","",267],[10,"clone_from","","",267],[10,"cmp","","",268],[10,"partial_cmp","","",268],[10,"lt","","",268],[10,"le","","",268],[10,"gt","","",268],[10,"ge","","",268],[10,"lt","","",268],[10,"le","","",268],[10,"gt","","",268],[10,"ge","","",268],[10,"assert_receiver_is_total_eq","","",268],[10,"eq","","",268],[10,"ne","","",268],[10,"ne","","",268],[10,"clone","","",268],[10,"clone_from","","",268],[10,"cmp","","",269],[10,"partial_cmp","","",269],[10,"lt","","",269],[10,"le","","",269],[10,"gt","","",269],[10,"ge","","",269],[10,"lt","","",269],[10,"le","","",269],[10,"gt","","",269],[10,"ge","","",269],[10,"assert_receiver_is_total_eq","","",269],[10,"eq","","",269],[10,"ne","","",269],[10,"ne","","",269],[10,"clone","","",269],[10,"clone_from","","",269],[10,"cmp","collections::string","",3],[10,"assert_receiver_is_total_eq","","",3],[10,"partial_cmp","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"lt","","",3],[10,"le","","",3],[10,"gt","","",3],[10,"ge","","",3],[10,"clone","","",3],[10,"clone_from","","",3],[10,"new","","Creates a new string buffer initialized with the empty string.",3],[10,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",3],[10,"from_str","","Creates a new string buffer from the given string.",3],[10,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",3],[10,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",3],[10,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",3],[10,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",3],[10,"from_chars","","Convert a vector of `char`s to a `String`.",3],[10,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",3],[10,"from_raw_buf","","Creates a `String` from a null-terminated `*const u8` buffer.",3],[10,"from_raw_buf_len","","Creates a `String` from a `*const u8` buffer of the given length.",3],[10,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",3],[10,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",3],[10,"from_char","","Creates a string buffer by repeating a character `length` times.",3],[10,"push_str","","Pushes the given string onto this string buffer.",3],[10,"grow","","Pushes `ch` onto the given string `count` times.",3],[10,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",3],[10,"reserve_additional","","Deprecated: Renamed to `reserve`.",3],[10,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted in the given\n`String`. The collection may reserve more space to avoid frequent reallocations.",3],[10,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be inserted in the\ngiven `String`. Does nothing if the capacity is already sufficient.",3],[10,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",3],[10,"push","","Adds the given character to the end of the string.",3],[10,"as_bytes","","Works with the underlying buffer as a byte slice.",3],[10,"truncate","","Shortens a string to the specified length.",3],[10,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",3],[10,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it. Returns `None` if `idx` is out of bounds.",3],[10,"insert","","Insert a character into the string buffer at byte position `idx`.",3],[10,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",3],[10,"len","","Return the number of bytes in this string.",3],[10,"is_empty","","Returns true if the string contains no bytes",3],[10,"clear","","Truncates the string, returning it to 0 length.",3],[10,"from_iter","","",3],[10,"extend","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"ne","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"ne","","",3],[10,"eq","core::borrow","",208],[10,"ne","","",208],[10,"ne","","",208],[10,"eq","collections::string","",3],[10,"ne","","",3],[10,"ne","","",3],[10,"eq","core::borrow","",208],[10,"ne","","",208],[10,"ne","","",208],[10,"as_slice","collections::string","",3],[10,"into_string","","",3],[10,"escape_default","","",3],[10,"escape_unicode","","",3],[10,"replace","","",3],[10,"repeat","","",3],[10,"lev_distance","","",3],[10,"nfd_chars","","",3],[10,"nfkd_chars","","",3],[10,"nfc_chars","","",3],[10,"nfkc_chars","","",3],[10,"default","","",3],[10,"fmt","","",3],[10,"hash","","",3],[10,"equiv","","",3],[10,"add","","",3],[10,"as_slice_","","",3],[10,"slice_from_or_fail","","",3],[10,"slice_to_or_fail","","",3],[10,"slice_or_fail","","",3],[10,"deref","","",3],[10,"deref","","",270],[10,"from_str","","",3],[10,"into_cow","","",3],[10,"clone","collections::str","",271],[10,"clone_from","","",271],[10,"clone","","",272],[10,"clone_from","","",272],[10,"next","","",272],[10,"size_hint","","",272],[10,"size_hint","","",272],[10,"clone","","",273],[10,"clone_from","","",273],[10,"clone","","",274],[10,"clone_from","","",274],[10,"next","","",274],[10,"size_hint","","",274],[10,"is_owned","","Returns `true` if this `MaybeOwned` wraps an owned string.",77],[10,"is_slice","","Returns `true` if this `MaybeOwned` wraps a borrowed string.",77],[10,"len","","Return the number of bytes in this string.",77],[10,"is_empty","","Returns true if the string contains no bytes",77],[10,"into_maybe_owned","collections::string","# Example",3],[10,"into_maybe_owned","collections::str","# Example",77],[10,"eq","","",77],[10,"ne","","",77],[10,"assert_receiver_is_total_eq","","",77],[10,"partial_cmp","","",77],[10,"lt","","",77],[10,"le","","",77],[10,"gt","","",77],[10,"ge","","",77],[10,"cmp","","",77],[10,"equiv","","",77],[10,"as_slice","","",77],[10,"into_string","","",77],[10,"escape_default","","",77],[10,"escape_unicode","","",77],[10,"replace","","",77],[10,"repeat","","",77],[10,"lev_distance","","",77],[10,"nfd_chars","","",77],[10,"nfkd_chars","","",77],[10,"nfc_chars","","",77],[10,"nfkc_chars","","",77],[10,"clone","","",77],[10,"clone_from","","",77],[10,"default","","",77],[10,"hash","","",77],[10,"fmt","","",77],[10,"as_slice","core::borrow","",208],[10,"fmt","core::intrinsics","",275],[10,"assert_receiver_is_total_eq","","",275],[10,"eq","","",275],[10,"ne","","",275],[10,"ne","","",275],[10,"clone","","",275],[10,"clone_from","","",275],[10,"of","","Returns the `TypeId` of the type this generic function has been instantiated with",275],[10,"hash","","",275],[10,"drop","core::finally","",276],[10,"fmt","core::cmp","",277],[10,"eq","","",277],[10,"ne","","",277],[10,"ne","","",277],[10,"clone","","",277],[10,"clone_from","","",277],[10,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",277],[10,"assert_receiver_is_total_eq","","",277],[10,"cmp","","",277],[10,"partial_cmp","","",277],[10,"lt","","",277],[10,"le","","",277],[10,"gt","","",277],[10,"ge","","",277],[10,"fmt","core::option","",278],[10,"cmp","","",278],[10,"assert_receiver_is_total_eq","","",278],[10,"partial_cmp","","",278],[10,"lt","","",278],[10,"le","","",278],[10,"gt","","",278],[10,"ge","","",278],[10,"lt","","",278],[10,"le","","",278],[10,"gt","","",278],[10,"ge","","",278],[10,"eq","","",278],[10,"ne","","",278],[10,"ne","","",278],[10,"clone","","",278],[10,"clone_from","","",278],[10,"is_some","","Returns `true` if the option is a `Some` value",278],[10,"is_none","","Returns `true` if the option is a `None` value",278],[10,"as_ref","","Convert from `Option<T>` to `Option<&T>`",278],[10,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",278],[10,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",278],[10,"expect","","Unwraps an option, yielding the content of a `Some`",278],[10,"unwrap","","Returns the inner `T` of a `Some(T)`.",278],[10,"unwrap_or","","Returns the contained value or a default.",278],[10,"unwrap_or_else","","Returns the contained value or computes it from a closure.",278],[10,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",278],[10,"map_or","","Applies a function to the contained value or returns a default.",278],[10,"map_or_else","","Applies a function to the contained value or computes a default.",278],[10,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",278],[10,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",278],[10,"iter","","Returns an iterator over the possibly contained value.",278],[10,"iter_mut","","Returns a mutable iterator over the possibly contained value.",278],[10,"into_iter","","Returns a consuming iterator over the possibly contained value.",278],[10,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",278],[10,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",278],[10,"or","","Returns the option if it contains a value, otherwise returns `optb`.",278],[10,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",278],[10,"take","","Takes the value out of the option, leaving a `None` in its place.",278],[10,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",278],[10,"unwrap_or_default","","Returns the contained value or a default",278],[10,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",278],[10,"default","","",278],[10,"clone","","",279],[10,"clone_from","","",279],[10,"next","","",279],[10,"size_hint","","",279],[10,"size_hint","","",279],[10,"next_back","","",279],[10,"rposition","","",279],[10,"len","","",279],[10,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",278],[1,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."],[0,"offset","chrono","Offsets from the local time to UTC."],[1,"UTC","chrono::offset","The UTC timescale. This is the most efficient offset when you don't need the local time."],[1,"FixedOffset","","The fixed offset, from UTC-23:59:59 to UTC+23:59:59."],[1,"Local","","The local timescale. This is implemented via the standard `time` crate."],[2,"LocalResult","","The conversion result from the local time to the timezone-aware datetime types."],[12,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",280],[12,"Single","","Given local time representation has a single unique result.",280],[12,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",280],[6,"Offset","","The offset from the local time to UTC."],[10,"ymd","","Makes a new `Date` from year, month, day and the current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",281],[10,"ymd_opt","","Makes a new `Date` from year, month, day and the current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",281],[10,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",281],[10,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",281],[10,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",281],[10,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current offset.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",281],[10,"hms","","Makes a new `Time` from hour, minute, second and the current offset.",281],[10,"hms_opt","","Makes a new `Time` from hour, minute, second and the current offset.",281],[10,"hms_milli","","Makes a new `Time` from hour, minute, second, millisecond and the current offset.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",281],[10,"hms_milli_opt","","Makes a new `Time` from hour, minute, second, millisecond and the current offset.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",281],[10,"hms_micro","","Makes a new `Time` from hour, minute, second, microsecond and the current offset.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",281],[10,"hms_micro_opt","","Makes a new `Time` from hour, minute, second, microsecond and the current offset.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",281],[10,"hms_nano","","Makes a new `Time` from hour, minute, second, nanosecond and the current offset.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",281],[10,"hms_nano_opt","","Makes a new `Time` from hour, minute, second, nanosecond and the current offset.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",281],[9,"name","","Returns a name or abbreviation of this offset.",281],[9,"local_minus_utc","","Returns the *current* offset from UTC to the local time.",281],[9,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",281],[9,"from_local_time","","Converts the local `NaiveTime` to the timezone-aware `Time` if possible.",281],[9,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",281],[9,"to_local_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",281],[9,"to_local_time","","Converts the UTC `NaiveTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",281],[9,"to_local_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",281],[10,"fmt","","",280],[10,"eq","","",280],[10,"ne","","",280],[10,"clone","","",280],[10,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",280],[10,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",280],[10,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",280],[10,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",280],[10,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",280],[10,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",280],[10,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",280],[10,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",280],[10,"unwrap","","Returns the single unique conversion result, or fails accordingly.",280],[10,"eq","","",282],[10,"ne","","",282],[10,"clone","","",282],[10,"today","","Returns a `Date` which corresponds to the current date.",282],[10,"now","","Returns a `DateTime` which corresponds to the current date.",282],[10,"name","","",282],[10,"local_minus_utc","","",282],[10,"from_local_date","","",282],[10,"from_local_time","","",282],[10,"from_local_datetime","","",282],[10,"to_local_date","","",282],[10,"to_local_time","","",282],[10,"to_local_datetime","","",282],[10,"fmt","","",282],[10,"eq","","",283],[10,"ne","","",283],[10,"clone","","",283],[10,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",283],[10,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",283],[10,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",283],[10,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",283],[10,"name","","",283],[10,"local_minus_utc","","",283],[10,"from_local_date","","",283],[10,"from_local_time","","",283],[10,"from_local_datetime","","",283],[10,"to_local_date","","",283],[10,"to_local_time","","",283],[10,"to_local_datetime","","",283],[10,"fmt","","",283],[10,"clone","","",284],[10,"today","","Returns a `Date` which corresponds to the current date.",284],[10,"now","","Returns a `DateTime` which corresponds to the current date.",284],[10,"name","","",284],[10,"local_minus_utc","","",284],[10,"from_local_date","","",284],[10,"from_local_time","","",284],[10,"from_local_datetime","","",284],[10,"to_local_date","","",284],[10,"to_local_time","","",284],[10,"to_local_datetime","","",284],[10,"fmt","","",284],[0,"naive","chrono","Date and time types which do not concern about the timezones."],[0,"date","chrono::naive","ISO 8601 calendar date without timezone."],[1,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date."],[18,"MIN","","The minimum possible `NaiveDate`."],[18,"MAX","","The maximum possible `NaiveDate`."],[10,"hash","","",285],[10,"clone","","",285],[10,"cmp","","",285],[10,"partial_cmp","","",285],[10,"lt","","",285],[10,"le","","",285],[10,"gt","","",285],[10,"ge","","",285],[10,"eq","","",285],[10,"ne","","",285],[10,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",285],[10,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",285],[10,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\").\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",285],[10,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or \"ordinal\").\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",285],[10,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",285],[10,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",285],[10,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",285],[10,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",285],[10,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",285],[10,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",285],[10,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",285],[10,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",285],[10,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",285],[10,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",285],[10,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",285],[10,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",285],[10,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",285],[10,"succ","","Makes a new `NaiveDate` for the next date.",285],[10,"succ_opt","","Makes a new `NaiveDate` for the next date.",285],[10,"pred","","Makes a new `NaiveDate` for the prior date.",285],[10,"pred_opt","","Makes a new `NaiveDate` for the prior date.",285],[10,"format","","Formats the date in the specified format string.\nSee the `format` module on the supported escape sequences.",285],[10,"year","","",285],[10,"month","","",285],[10,"month0","","",285],[10,"day","","",285],[10,"day0","","",285],[10,"ordinal","","",285],[10,"ordinal0","","",285],[10,"weekday","","",285],[10,"isoweekdate","","",285],[10,"with_year","","",285],[10,"with_month","","",285],[10,"with_month0","","",285],[10,"with_day","","",285],[10,"with_day0","","",285],[10,"with_ordinal","","",285],[10,"with_ordinal0","","",285],[10,"add","","",285],[10,"add","chrono::duration","",1],[10,"sub","chrono::naive::date","",285],[10,"sub","","",285],[10,"fmt","","",285],[0,"time","chrono::naive","ISO 8601 time without timezone."],[1,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation."],[10,"hash","","",286],[10,"clone","","",286],[10,"cmp","","",286],[10,"partial_cmp","","",286],[10,"lt","","",286],[10,"le","","",286],[10,"gt","","",286],[10,"ge","","",286],[10,"eq","","",286],[10,"ne","","",286],[10,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",286],[10,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",286],[10,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",286],[10,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.",286],[10,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",286],[10,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.",286],[10,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",286],[10,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",286],[10,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",286],[10,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.",286],[10,"format","","Formats the time in the specified format string.\nSee the `format` module on the supported escape sequences.",286],[10,"hour","","",286],[10,"minute","","",286],[10,"second","","",286],[10,"nanosecond","","",286],[10,"with_hour","","",286],[10,"with_minute","","",286],[10,"with_second","","",286],[10,"with_nanosecond","","",286],[10,"num_seconds_from_midnight","","",286],[10,"add","","",286],[10,"add","chrono::duration","",1],[10,"sub","chrono::naive::time","",286],[10,"sub","","",286],[10,"fmt","","",286],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone."],[1,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone."],[10,"hash","","",287],[10,"clone","","",287],[10,"cmp","","",287],[10,"partial_cmp","","",287],[10,"lt","","",287],[10,"le","","",287],[10,"gt","","",287],[10,"ge","","",287],[10,"eq","","",287],[10,"ne","","",287],[10,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",287],[10,"from_num_seconds_from_unix_epoch","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC and the number of nanoseconds\nsince the last whole non-leap second.",287],[10,"from_num_seconds_from_unix_epoch_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC and the number of nanoseconds\nsince the last whole non-leap second.",287],[10,"date","","Retrieves a date component.",287],[10,"time","","Retrieves a time component.",287],[10,"num_seconds_from_unix_epoch","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC.\nNote that this does *not* account for the timezone!",287],[10,"format","","Formats the combined date and time in the specified format string.\nSee the `format` module on the supported escape sequences.",287],[10,"year","","",287],[10,"month","","",287],[10,"month0","","",287],[10,"day","","",287],[10,"day0","","",287],[10,"ordinal","","",287],[10,"ordinal0","","",287],[10,"weekday","","",287],[10,"isoweekdate","","",287],[10,"with_year","","",287],[10,"with_month","","",287],[10,"with_month0","","",287],[10,"with_day","","",287],[10,"with_day0","","",287],[10,"with_ordinal","","",287],[10,"with_ordinal0","","",287],[10,"hour","","",287],[10,"minute","","",287],[10,"second","","",287],[10,"nanosecond","","",287],[10,"with_hour","","",287],[10,"with_minute","","",287],[10,"with_second","","",287],[10,"with_nanosecond","","",287],[10,"add","","",287],[10,"add","chrono::duration","",1],[10,"sub","chrono::naive::datetime","",287],[10,"sub","","",287],[10,"fmt","","",287],[0,"date","chrono","ISO 8601 calendar date with timezone."],[1,"Date","chrono::date","ISO 8601 calendar date with timezone."],[18,"MIN","","The minimum possible `Date`."],[18,"MAX","","The maximum possible `Date`."],[10,"clone","","",288],[10,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `Offset` trait.",288],[10,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",288],[10,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",288],[10,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",288],[10,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",288],[10,"succ","","Makes a new `Date` for the next date.",288],[10,"succ_opt","","Makes a new `Date` for the next date.",288],[10,"pred","","Makes a new `Date` for the prior date.",288],[10,"pred_opt","","Makes a new `Date` for the prior date.",288],[10,"offset","","Retrieves an associated offset.",288],[10,"with_offset","","Changes the associated offset.\nThis does not change the actual `Date` (but will change the string representation).",288],[10,"format","","Formats the date in the specified format string.\nSee the `format` module on the supported escape sequences.",288],[10,"year","","",288],[10,"month","","",288],[10,"month0","","",288],[10,"day","","",288],[10,"day0","","",288],[10,"ordinal","","",288],[10,"ordinal0","","",288],[10,"weekday","","",288],[10,"isoweekdate","","",288],[10,"with_year","","",288],[10,"with_month","","",288],[10,"with_month0","","",288],[10,"with_day","","",288],[10,"with_day0","","",288],[10,"with_ordinal","","",288],[10,"with_ordinal0","","",288],[10,"eq","","",288],[10,"equiv","","",288],[10,"partial_cmp","","",288],[10,"cmp","","",288],[10,"hash","","",288],[10,"add","","",288],[10,"add","chrono::duration","",1],[10,"sub","chrono::date","",288],[10,"sub","","",288],[10,"fmt","","",288],[0,"time","chrono","ISO 8601 time with timezone."],[1,"Time","chrono::time","ISO 8601 time with timezone."],[10,"clone","","",289],[10,"from_utc","","Makes a new `Time` with given *UTC* time and offset.\nThe local time should be constructed via the `Offset` trait.",289],[10,"offset","","Retrieves an associated offset.",289],[10,"with_offset","","Changes the associated offset.\nThis does not change the actual `Time` (but will change the string representation).",289],[10,"format","","Formats the time in the specified format string.\nSee the `format` module on the supported escape sequences.",289],[10,"hour","","",289],[10,"minute","","",289],[10,"second","","",289],[10,"nanosecond","","",289],[10,"with_hour","","",289],[10,"with_minute","","",289],[10,"with_second","","",289],[10,"with_nanosecond","","",289],[10,"num_seconds_from_midnight","","",289],[10,"eq","","",289],[10,"equiv","","",289],[10,"partial_cmp","","",289],[10,"cmp","","",289],[10,"hash","","",289],[10,"add","","",289],[10,"add","chrono::duration","",1],[10,"sub","chrono::time","",289],[10,"sub","","",289],[10,"fmt","","",289],[0,"datetime","chrono","ISO 8601 date and time."],[1,"DateTime","chrono::datetime","ISO 8601 combined date and time with timezone."],[10,"clone","","",290],[10,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `Offset` trait.",290],[10,"date","","Retrieves a date component.",290],[10,"time","","Retrieves a time component.",290],[10,"num_seconds_from_unix_epoch","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC.",290],[10,"offset","","Retrieves an associated offset.",290],[10,"with_offset","","Changes the associated offset.\nThis does not change the actual `DateTime` (but will change the string representation).",290],[10,"format","","Formats the combined date and time in the specified format string.\nSee the `format` module on the supported escape sequences.",290],[10,"year","","",290],[10,"month","","",290],[10,"month0","","",290],[10,"day","","",290],[10,"day0","","",290],[10,"ordinal","","",290],[10,"ordinal0","","",290],[10,"weekday","","",290],[10,"isoweekdate","","",290],[10,"with_year","","",290],[10,"with_month","","",290],[10,"with_month0","","",290],[10,"with_day","","",290],[10,"with_day0","","",290],[10,"with_ordinal","","",290],[10,"with_ordinal0","","",290],[10,"hour","","",290],[10,"minute","","",290],[10,"second","","",290],[10,"nanosecond","","",290],[10,"with_hour","","",290],[10,"with_minute","","",290],[10,"with_second","","",290],[10,"with_nanosecond","","",290],[10,"eq","","",290],[10,"equiv","","",290],[10,"partial_cmp","","",290],[10,"cmp","","",290],[10,"hash","","",290],[10,"add","","",290],[10,"add","chrono::duration","",1],[10,"sub","chrono::datetime","",290],[10,"sub","","",290],[10,"fmt","","",290],[0,"format","chrono","Formatting utilities for date and time."],[1,"DelayedFormat","chrono::format","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type."],[10,"new","","Makes a new `DelayedFormat` value out of local date and time.",291],[10,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",291],[10,"fmt","","",291],[6,"Datelike","chrono","The common set of methods for date component."],[9,"year","","Returns the year number.",292],[10,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",292],[9,"month","","Returns the month number starting from 1.",292],[9,"month0","","Returns the month number starting from 0.",292],[9,"day","","Returns the day of month starting from 1.",292],[9,"day0","","Returns the day of month starting from 0.",292],[9,"ordinal","","Returns the day of year starting from 1.",292],[9,"ordinal0","","Returns the day of year starting from 0.",292],[9,"weekday","","Returns the day of week.",292],[9,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",292],[9,"with_year","","Makes a new value with the year number changed.",292],[9,"with_month","","Makes a new value with the month number (starting from 1) changed.",292],[9,"with_month0","","Makes a new value with the month number (starting from 0) changed.",292],[9,"with_day","","Makes a new value with the day of month (starting from 1) changed.",292],[9,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",292],[9,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",292],[9,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",292],[10,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",292],[6,"Timelike","","The common set of methods for time component."],[9,"hour","","Returns the hour number from 0 to 23.",293],[10,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",293],[9,"minute","","Returns the minute number from 0 to 59.",293],[9,"second","","Returns the second number from 0 to 59.",293],[9,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",293],[9,"with_hour","","Makes a new value with the hour number changed.",293],[9,"with_minute","","Makes a new value with the minute number changed.",293],[9,"with_second","","Makes a new value with the second number changed.",293],[9,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",293],[10,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",293],[10,"fmt","","",0],[10,"from_i64","","",0],[10,"from_u64","","",0],[10,"clone","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"succ","","The next day in the week.",0],[10,"pred","","The previous day in the week.",0],[10,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",0],[10,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",0],[10,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",0],[10,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",0],[1,"Duration","","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."]],"paths":[[2,"Weekday"],[1,"Duration"],[1,"Ascii"],[1,"String"],[1,"Vec"],[1,"Key"],[1,"Key"],[1,"CVec"],[1,"DynamicLibrary"],[1,"Formatter"],[2,"Alignment"],[1,"BufferedReader"],[1,"BufferedWriter"],[1,"LineBufferedWriter"],[1,"InternalBufferedWriter"],[1,"BufferedStream"],[1,"ChanReader"],[1,"ChanWriter"],[1,"MemWriter"],[1,"MemReader"],[1,"BufWriter"],[1,"BufReader"],[2,"Result"],[1,"TempDir"],[1,"Bytes"],[1,"File"],[1,"Directories"],[1,"Path"],[1,"TcpStream"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"UdpSocket"],[1,"UdpStream"],[2,"IpAddr"],[1,"SocketAddr"],[1,"UnixStream"],[1,"UnixListener"],[1,"UnixAcceptor"],[1,"PipeStream"],[1,"EnvKey"],[1,"Command"],[1,"ProcessOutput"],[2,"StdioContainer"],[2,"ProcessExit"],[1,"Process"],[1,"StdinReader"],[1,"StdinReaderGuard"],[1,"StdReader"],[1,"StdWriter"],[1,"Timer"],[1,"TimerCallback"],[1,"LimitReader"],[1,"NullWriter"],[1,"ZeroReader"],[1,"NullReader"],[1,"MultiWriter"],[1,"ChainedReader"],[1,"TeeReader"],[1,"IterReader"],[1,"IoError"],[1,"Box"],[2,"IoErrorKind"],[1,"RefReader"],[1,"RefWriter"],[1,"Lines"],[1,"Chars"],[1,"IncomingConnections"],[2,"FileType"],[1,"FileStat"],[1,"UnstableFileStat"],[1,"FilePermission"],[2,"MapError"],[1,"MemoryMap"],[1,"Path"],[2,"PathPrefix"],[1,"Display"],[1,"CString"],[2,"MaybeOwned"],[1,"OsRng"],[1,"ReaderRng"],[1,"StdRng"],[1,"TaskRngReseeder"],[1,"TaskRng"],[1,"Range"],[1,"Gamma"],[1,"GammaSmallShape"],[1,"GammaLargeShape"],[1,"ChiSquared"],[1,"FisherF"],[1,"StudentT"],[1,"StandardNormal"],[1,"Normal"],[1,"LogNormal"],[1,"Exp1"],[1,"Exp"],[1,"RandSample"],[1,"WeightedChoice"],[1,"ReseedingRng"],[1,"ReseedWithDefault"],[1,"DefaultResizePolicy"],[1,"HashMap"],[1,"Entries"],[1,"MutEntries"],[1,"MoveEntries"],[1,"OccupiedEntry"],[1,"VacantEntry"],[1,"HashSet"],[1,"SafeHash"],[1,"FullBucket"],[1,"EmptyBucket"],[1,"Bucket"],[2,"BucketState"],[1,"GapThenFull"],[1,"RawTable"],[1,"RawBuckets"],[1,"RevMoveBuckets"],[1,"Entries"],[1,"MutEntries"],[1,"MoveEntries"],[1,"KeyRef"],[1,"LruCache"],[1,"Items"],[1,"MoveItems"],[1,"Rawlink"],[1,"DList"],[1,"MutItems"],[1,"RingBuf"],[1,"Items"],[1,"MutItems"],[1,"MoveItems"],[1,"BinaryHeap"],[1,"Items"],[1,"MoveItems"],[1,"EnumSet"],[1,"Items"],[1,"VecMap"],[1,"Entries"],[1,"MutEntries"],[1,"RandomSipHasher"],[1,"SipState"],[1,"SipHasher"],[1,"TaskBuilder"],[1,"AtomicOption"],[1,"Barrier"],[1,"Condvar"],[1,"StaticCondvar"],[1,"Future"],[1,"Mutex"],[1,"StaticMutex"],[1,"MutexGuard"],[1,"StaticMutexGuard"],[1,"Once"],[1,"Flag"],[1,"Guard"],[1,"RWLock"],[1,"StaticRWLock"],[1,"RWLockReadGuard"],[1,"RWLockWriteGuard"],[1,"StaticRWLockReadGuard"],[1,"StaticRWLockWriteGuard"],[1,"Semaphore"],[1,"SemaphoreGuard"],[1,"Sentinel"],[1,"TaskPool"],[1,"Packet"],[1,"Select"],[1,"Handle"],[1,"Packets"],[1,"Packet"],[1,"Packet"],[2,"Failure"],[1,"Packet"],[1,"Queue"],[1,"Queue"],[2,"TryRecvError"],[2,"TrySendError"],[1,"Sender"],[1,"SyncSender"],[1,"Receiver"],[1,"Messages"],[1,"Condvar"],[1,"FileDesc"],[1,"Mutex"],[1,"Inner"],[1,"UnixStream"],[1,"UnixListener"],[1,"UnixAcceptor"],[1,"Process"],[1,"RWLock"],[1,"TcpListener"],[1,"TcpAcceptor"],[1,"Timer"],[1,"TTY"],[1,"Condvar"],[1,"Helper"],[1,"Mutex"],[2,"SocketStatus"],[1,"Inner"],[1,"Guard"],[1,"TcpStream"],[1,"UdpSocket"],[1,"RWLock"],[1,"StaticKey"],[1,"Key"],[1,"Stdio"],[1,"CChars"],[1,"ElementSwaps"],[1,"Permutations"],[2,"Cow"],[1,"MoveItems"],[1,"DerefVec"],[1,"PartialVecNonZeroSized"],[1,"PartialVecZeroSized"],[1,"Enumerate"],[1,"Inspect"],[1,"Rev"],[1,"Map"],[1,"Zip"],[1,"ByRef"],[2,"MinMaxResult"],[1,"Cloned"],[1,"Cycle"],[1,"Chain"],[1,"Filter"],[1,"FilterMap"],[1,"Peekable"],[1,"SkipWhile"],[1,"TakeWhile"],[1,"Skip"],[1,"Take"],[1,"Scan"],[1,"FlatMap"],[1,"Fuse"],[1,"Unfold"],[1,"Counter"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[1,"Repeat"],[1,"Cell"],[1,"RefCell"],[1,"BorrowRef"],[1,"Ref"],[1,"BorrowRefMut"],[1,"RefMut"],[1,"UnsafeCell"],[1,"Item"],[1,"i8x16"],[1,"i16x8"],[1,"i32x4"],[1,"i64x2"],[1,"u8x16"],[1,"u16x8"],[1,"u32x4"],[1,"u64x2"],[1,"f32x4"],[1,"f64x2"],[1,"Rc"],[1,"Weak"],[1,"CovariantType"],[1,"ContravariantType"],[1,"InvariantType"],[1,"CovariantLifetime"],[1,"ContravariantLifetime"],[1,"InvariantLifetime"],[1,"NoSend"],[1,"NoCopy"],[1,"NoSync"],[1,"Managed"],[1,"DerefString"],[2,"DecompositionType"],[1,"Decompositions"],[2,"RecompositionState"],[1,"Recompositions"],[1,"TypeId"],[1,"Finallyalizer"],[2,"Ordering"],[2,"Option"],[1,"Item"],[2,"LocalResult"],[6,"Offset"],[1,"UTC"],[1,"FixedOffset"],[1,"Local"],[1,"NaiveDate"],[1,"NaiveTime"],[1,"NaiveDateTime"],[1,"Date"],[1,"Time"],[1,"DateTime"],[1,"DelayedFormat"],[6,"Datelike"],[6,"Timelike"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[1,"TmFmt","","A wrapper around a `Tm` and format string that implements Show."],[2,"ParseError","",""],[12,"InvalidSecond","","",2],[12,"InvalidMinute","","",2],[12,"InvalidHour","","",2],[12,"InvalidDay","","",2],[12,"InvalidMonth","","",2],[12,"InvalidYear","","",2],[12,"InvalidDayOfWeek","","",2],[12,"InvalidDayOfMonth","","",2],[12,"InvalidDayOfYear","","",2],[12,"InvalidZoneOffset","","",2],[12,"InvalidTime","","",2],[12,"MissingFormatConverter","","",2],[12,"InvalidFormatSpecifier","","",2],[12,"UnexpectedCharacter","","",2],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"decode","","",0],[10,"encode","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[10,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",3]],"paths":[[1,"Timespec"],[1,"Tm"],[2,"ParseError"],[1,"TmFmt"]]};

searchIndex['gcc'] = {"items":[[0,"","gcc",""],[1,"Config","","Extra configuration to pass to gcc."],[11,"include_directories","","Directories where gcc will look for header files.",0],[11,"definitions","","Additional definitions (`-DKEY` or `-DKEY=VALUE`).",0],[11,"objects","","Additional object files to link into the final archive",0],[3,"compile_library","","Compile a library from the given set of input C files."],[10,"default","","",0]],"paths":[[1,"Config"]]};

initSearch(searchIndex);
